// (Auto-generated Lark grammar from iec.grammar)

// IEC 61131-3 Strucured Text Grammar version 1.2

// Copyright (c) 2009, X-Pie Software GmbH

// extending grammar language by:

// ; terminates production

// <regex> represents regular expression regex

// $'string' or $"string": string is a keyword for whitespace handling

// non-terminal symbols may start with an _ (underscore)

// B.0

iec_source: (_library_element_declaration | action | pragma)*

pragma: /(?s){[^}]*?}/ ";"?

_library_element_declaration: data_type_declaration | function_declaration | function_block_declaration | program_declaration | configuration_declaration | global_var_declarations

// B.1.1

letter: /[A-Za-z]/

digit: /[0-9]/

octal_digit: /[0-7]/

hex_digit: /[0-9A-F]/

IDENTIFIER: /\w+/

// B.1.2

_constant: time_literal | _numeric_literal | _character_string | bit_string_literal | boolean_literal

// B.1.2.1

_numeric_literal: real_literal | integer_literal

integer_literal: (integer_type_name "#")? /(2\#(1|0)(_?(1|0))*)|(8\#[0-7](_?[0-7])*)|(16\#[0-9A-F](_?[0-9A-F])*)|((\+|\-)?[0-9](_?[0-9])*)/

signed_integer: /(\+|\-)?[0-9](_?[0-9])*/

integer: /[0-9](_?[0-9])*/

binary_integer: "2#" /(1|0)(_?(1|0))*/

bit: /1|0/

octal_integer: "8#" /[0-7](_?[0-7])*/

hex_integer: "16#" /[0-9A-F](_?[0-9A-F])*/

real_literal: (((real_type_name "#")? /((\+|\-)?[0-9](_?[0-9])*)\.([0-9](_?[0-9])*)((e|E)(\+|\-)?([0-9](_?[0-9])*))?/)) | (((real_type_name "#")? /((\+|\-)?[0-9](_?[0-9])*)((e|E)(\+|\-)?([0-9](_?[0-9])*))/))

exponent: /(E|e)(\+|\-)?[0-9](_?[0-9])*/

bit_string_literal: (bit_string_type_name "#")? /(2\#(1|0)(_?(1|0))*)|(8\#[0-7](_?[0-7])*)|(16\#[0-9A-F](_?[0-9A-F])*)|([0-9](_?[0-9])*)/

boolean_literal: ("BOOL#"i)? /1|0|TRUE|FALSE/

// B.1.2.2

_character_string: single_byte_character_string | double_byte_character_string

single_byte_character_string: /\'([^\$\"\']|\$\$|\$L|\$N|\$P|\$R|\$T|\$l|\$n|\$p|\$r|\$t|\$\'|\"|\$[0-9A-F][0-9A-F])*\'/

double_byte_character_string: /\"([^\$\"\']|\$\$|\$L|\$N|\$P|\$R|\$T|\$l|\$n|\$p|\$r|\$t|\$\'|\"|\$[0-9A-F][0-9A-F][0-9A-F][0-9A-F])*\"/

single_byte_character_representation: /[^\$\"\']|\$\$|\$L|\$N|\$P|\$R|\$T|\$l|\$n|\$p|\$r|\$t|\$\'|\"|\$[0-9A-F][0-9A-F]/

double_byte_character_representation: /[^\$\"\']|\$\$|\$L|\$N|\$P|\$R|\$T|\$l|\$n|\$p|\$r|\$t|\$\'|\"|\$[0-9A-F][0-9A-F][0-9A-F][0-9A-F]/

common_character_representation: /[^\$\"\']|\$\$|\$L|\$N|\$P|\$R|\$T|\$l|\$n|\$p|\$r|\$t/

// B.1.2.3

time_literal: duration | time_of_day | date | date_and_time

// B.1.2.3.1

duration: ((("TIME"i) | ("T"i) | ("t"i))) "#" "-"? _interval

_interval: days | hours | minutes | seconds | milliseconds

days: (fixed_point "d"i) | (integer "d"i "_"? hours) | (integer "d"i)

fixed_point: /[0-9](_?[0-9])*\.[0-9](_?[0-9])*/

hours: (fixed_point "h"i) | (integer "h"i "_"? minutes) | (integer "h"i)

minutes: (fixed_point "m"i) | ((integer "m"i "_"? seconds) (integer "m"i))

seconds: (fixed_point "s"i) | (integer "s"i "_"? milliseconds) | (integer "s"i)

milliseconds: (fixed_point "ms"i) | (integer "ms"i)

// B.1.2.3.2

time_of_day: ((("TIME_OF_DAY"i) | ("TOD"i))) "#" _daytime

_daytime: day_hour ":" day_minute ":" day_second

day_hour: integer

day_minute: integer

day_second: fixed_point

date: ((("DATE"i) | ("D"i) | ("d"i))) "#" date_literal

date_literal: year "-" month "-" day

year: integer

month: integer

day: integer

date_and_time: ((("DATE_AND_TIME"i) | ("DT"i))) "#" date_literal "-" _daytime

// B.1.3

data_type_name: non_generic_type_name | generic_type_name

non_generic_type_name: pointer_to? (_elementary_type_name | derived_type_name)

// B.1.3.1

_elementary_type_name: _numeric_type_name | date_type_name | bit_string_type_name | string_var_type

_numeric_type_name: integer_type_name | real_type_name

integer_type_name: _signed_integer_type_name | _unsigned_integer_type_name

TYPE_SINT: "SINT"i

TYPE_INT: "INT"i

TYPE_DINT: "DINT"i

TYPE_LINT: "LINT"i

_signed_integer_type_name: TYPE_SINT | TYPE_INT | TYPE_DINT | TYPE_LINT

TYPE_USINT: "USINT"i

TYPE_UINT: "UINT"i

TYPE_UDINT: "UDINT"i

TYPE_ULINT: "ULINT"i

_unsigned_integer_type_name: TYPE_USINT | TYPE_UINT | TYPE_UDINT | TYPE_ULINT

TYPE_REAL: "REAL"i

TYPE_LREAL: "LREAL"i

real_type_name: TYPE_REAL | TYPE_LREAL

type_tod: ("TIME_OF_DAY"i) | ("TOD"i)

type_datetime: ("DATE_AND_TIME"i) | ("DT"i)

TYPE_DATE: "DATE"i

TYPE_TIME: "TIME"i

date_type_name: type_tod | type_datetime | TYPE_DATE | TYPE_TIME

TYPE_BOOL: "BOOL"i

TYPE_BYTE: "BYTE"i

TYPE_WORD: "WORD"i

TYPE_DWORD: "DWORD"i

TYPE_LWORD: "LWORD"i

bit_string_type_name: TYPE_BOOL | TYPE_BYTE | TYPE_WORD | TYPE_DWORD | TYPE_LWORD

// B.1.3.2

generic_type_name: /ANY|ANY_DERIVED|ANY_ELEMENTARY|ANY_MAGNITUDE|ANY_NUM|ANY_REAL|ANY_INT|ANY_BIT|ANY_STRING|ANY_DATE/

// B.1.3.3

derived_type_name: single_element_type_name | array_type_name | structure_type_name | string_type_name

single_element_type_name: simple_type_name | subrange_type_name | enumerated_type_name

simple_type_name: IDENTIFIER

subrange_type_name: IDENTIFIER

enumerated_type_name: IDENTIFIER

array_type_name: IDENTIFIER

structure_type_name: IDENTIFIER

data_type_declaration: "TYPE"i _type_declaration* "END_TYPE"i ";"?

pointer_to: "POINTER"i "TO"i

reference_to: "REFERENCE"i "TO"i

_type_declaration: (array_type_declaration ";") | (structure_type_declaration ";"?) | (string_type_declaration ";") | (_single_element_type_declaration ";")

_single_element_type_declaration: simple_type_declaration | extended_type_declaration | subrange_type_declaration | enumerated_type_declaration

simple_type_declaration: simple_type_name ":" simple_spec_init

extended_type_declaration: simple_type_name "EXTENDS"i _dotted_name ":" simple_spec_init

simple_spec_init: (pointer_to | reference_to)? _simple_specification (":=" expression)?

_simple_specification: _elementary_type_name | simple_type_name | _dotted_name

subrange_type_declaration: subrange_type_name ":" subrange_spec_init

subrange_spec_init: (pointer_to | reference_to)? subrange_specification (":=" expression)?

subrange_specification: (integer_type_name "(" subrange ")") | subrange_type_name

subrange: (expression ".." expression) | "*"

enumerated_type_declaration: enumerated_type_name ":" enumerated_spec_init

enumerated_spec_init: (pointer_to | reference_to)? enumerated_specification (":=" enumerated_value)?

enumerated_specification: (("(" enumerated_value ("," enumerated_value)* ")" integer_type_name?)) | enumerated_type_name

enumerated_value: (enumerated_type_name "#")? IDENTIFIER (":=" integer_literal)?

array_type_declaration: array_type_name ":" array_spec_init

array_spec_init: (pointer_to | reference_to)? array_specification (":=" array_initialization)?

array_specification: "ARRAY"i "[" subrange ("," subrange)* "]" "OF"i (string_type | non_generic_type_name)

array_initialization: (("[" array_initial_elements ("," array_initial_elements)* "]")) | ((array_initial_elements ("," array_initial_elements)*))

array_initial_elements: (((integer | enumerated_value) "(" array_initial_element? ")")) | array_initial_element

array_initial_element: _constant | structure_initialization | enumerated_value

structure_type_declaration: structure_type_name ":" _structure_specification

_structure_specification: ((pointer_to | reference_to)? _structure_declaration) | initialized_structure

initialized_structure: structure_type_name ":=" structure_initialization

_structure_declaration: "STRUCT"i structure_element_declaration ";" (structure_element_declaration ";")* "END_STRUCT"i ";"?

structure_element_declaration: pragma? (structure_element_name incompl_location? ":" (initialized_structure | array_spec_init | string_var_type | simple_spec_init | subrange_spec_init | enumerated_spec_init))

structure_element_name: IDENTIFIER

structure_initialization: "(" structure_element_initialization ("," structure_element_initialization)* ")"

structure_element_initialization: _constant | ((structure_element_name ":=" (_constant | expression | enumerated_value | array_initialization | structure_initialization)))

string_type_name: IDENTIFIER

string_initialization: ":=" _character_string

string_type_declaration: string_type_name ":" string_type string_initialization?

string_type: (STRING | WSTRING) (((("[" (integer | simple_type_name) "]")) | (("(" (integer | simple_type_name) ")"))))?

string_var_type: string_type string_initialization?

// B.1.4

_variable: direct_variable | _symbolic_variable

_symbolic_variable: multi_element_variable | variable_name

variable_name: IDENTIFIER dereferenced?

// B.1.4.1

direct_variable: "%" location_prefix size_prefix? integer ("." integer)*

location_prefix: /I|Q|M/

size_prefix: /X|B|W|D|L/

// B.1.4.2

_subscript: expression

subscript_list: "[" _subscript ("," _subscript)* "]" dereferenced?

dereferenced: "^"

field_selector: dereferenced? "." variable_name

multi_element_variable: variable_name (subscript_list | field_selector) (subscript_list | field_selector)*

// B.1.4.3

retain: "RETAIN"i

non_retain: "NON_RETAIN"i

input_declarations: "VAR_INPUT"i (retain | non_retain)? var_input_body "END_VAR"i ";"?

var_input_body: (((((var_init_decl | edge_declaration) ";")) | pragma))*

R_EDGE: "R_EDGE"i

F_EDGE: "F_EDGE"i

edge_declaration: _var1_list ":" "BOOL"i (R_EDGE | F_EDGE)

var_init_decl: pragma? (array_var_init_decl | structured_var_init_decl | string_var_declaration | _var1_init_decl | fb_name_decl | fb_invocation_decl)

_var1_init_decl: _var1_list ":" (simple_spec_init | subrange_spec_init | enumerated_spec_init)

_var1_list: variable_name (location | incompl_location)? ("," variable_name location?)*

array_var_init_decl: _var1_list ":" array_spec_init

structured_var_init_decl: _var1_list ":" initialized_structure

fb_name_decl: fb_name_list ":" function_block_type_name (":=" structure_initialization)?

fb_invocation_decl: fb_name_list ":" fb_invocation

fb_name_list: fb_name ("," fb_name)*

fb_name: IDENTIFIER

var_body: (((var_init_decl ";") | (pragma ";"?)))*

output_declarations: "VAR_OUTPUT"i (retain | non_retain)? var_body "END_VAR"i ";"?

input_output_declarations: "VAR_IN_OUT"i var_body "END_VAR"i ";"?

var_declaration: _temp_var_decl | fb_name_decl

_temp_var_decl: _var1_declaration | array_var_declaration | structured_var_declaration | string_var_declaration

_var1_declaration: _var1_list ":" (_simple_specification | subrange_specification | enumerated_specification)

array_var_declaration: _var1_list ":" array_specification

structured_var_declaration: _var1_list ":" structure_type_name

var_declarations: "VAR"i (constant | PERSISTENT)? var_body "END_VAR"i ";"?

retentive_var_declarations: "VAR"i "RETAIN"i var_body "END_VAR"i ";"?

constant: "CONSTANT"i

located_var_declarations: "VAR"i (constant | retain | non_retain)? PERSISTENT? (located_var_decl | pragma)* "END_VAR"i ";"?

located_var_decl: variable_name? location ":" located_var_spec_init ";"

external_var_declarations: "VAR_EXTERNAL"i constant? (external_declaration | pragma)* "END_VAR"i ";"?

external_declaration: global_var_name ":" (_simple_specification | subrange_specification | enumerated_specification | array_specification | structure_type_name | function_block_type_name) ";"

global_var_name: IDENTIFIER

PERSISTENT: "PERSISTENT"i

global_var_declarations: "VAR_GLOBAL"i (constant | retain)? PERSISTENT? (var_init_decl | global_var_decl | pragma)* "END_VAR"i ";"?

global_var_decl: global_var_spec ":" (located_var_spec_init | function_block_type_name)? ";"

global_var_spec: global_var_list | (global_var_name? location)

located_var_spec_init: simple_spec_init | subrange_spec_init | enumerated_spec_init | array_spec_init | initialized_structure | single_byte_string_spec | double_byte_string_spec

location: "AT"i direct_variable

global_var_list: global_var_name ("," global_var_name)*

string_var_declaration: single_byte_string_var_declaration | double_byte_string_var_declaration

single_byte_string_var_declaration: _var1_list ":" single_byte_string_spec

single_byte_string_spec: "STRING"i (((("[" (integer | simple_type_name) "]")) | (("(" (integer | simple_type_name) ")"))))? (":=" single_byte_character_string)?

double_byte_string_var_declaration: _var1_list ":" double_byte_string_spec

double_byte_string_spec: "WSTRING"i (((("[" (integer | simple_type_name) "]")) | (("(" (integer | simple_type_name) ")"))))? (":=" double_byte_character_string)?

incompl_located_var_declarations: "VAR"i (retain | non_retain)? (incompl_located_var_decl | pragma)* "END_VAR"i ";"?

incompl_located_var_decl: variable_name incompl_location ":" var_spec ";"

incompl_location: "AT"i /\%(I|Q|M)\*/

STRING: "STRING"i

WSTRING: "WSTRING"i

var_spec: _simple_specification | subrange_specification | enumerated_specification | array_specification | structure_type_name | ((STRING ("[" integer "]")?)) | ((WSTRING ("[" integer "]")?))

// B.1.5.1

// function_name ::= standard_function_name |derived_function_name ;

_function_name: derived_function_name

// standard_function_name ::= <gruschdelwurschdel> ;

derived_function_name: IDENTIFIER

function_declaration: "FUNCTION"i derived_function_name ":" (_elementary_type_name | derived_type_name) ";"? (_io_var_declarations | function_var_decls)* function_body? "END_FUNCTION"i ";"?

_io_var_declarations: input_declarations | output_declarations | input_output_declarations

function_var_decls: "VAR"i constant? var_body "END_VAR"i ";"?

// TODO: {function_var_decl ';'}

// function_body ::= ladder_diagram | function_block_diagram 

// | instruction_list | statement_list ;

function_body: statement_list

// | <andere Sprachen> ;

function_var_decl: _var1_init_decl | array_var_init_decl | structured_var_init_decl | string_var_declaration

// B.1.5.2

_dotted_name: IDENTIFIER ("." IDENTIFIER)*

function_block_type_name: standard_function_block_name | derived_function_block_name

standard_function_block_name: IDENTIFIER

derived_function_block_name: IDENTIFIER

function_block_declaration: ((("FUNCTION_BLOCK"i) | ("FUNCTIONBLOCK"i))) derived_function_block_name ("EXTENDS"i _dotted_name)? (_io_var_declarations | _other_var_declarations)* function_block_body? ((("END_FUNCTION_BLOCK"i) | ("END_FUNCTIONBLOCK"i))) ";"?

_other_var_declarations: external_var_declarations | var_declarations | retentive_var_declarations | non_retentive_var_decls | temp_var_decls | incompl_located_var_declarations

temp_var_decls: "VAR_TEMP"i var_body "END_VAR"i ";"?

// TODO: _temp_var_decl, which seemed too restrictive,  was replaced with

// var_init_decl (any further implications here?)

non_retentive_var_decls: "VAR"i "NON_RETAIN"i var_body "END_VAR"i ";"?

function_block_body: sequential_function_chart | statement_list

// | <andere Sprachen> 

// B.1.5.3

program_type_name: IDENTIFIER

program_declaration: "PROGRAM"i program_type_name (_io_var_declarations | _other_var_declarations | located_var_declarations | program_access_decls)* function_block_body? "END_PROGRAM"i ";"?

program_access_decls: "VAR_ACCESS"i program_access_decl ";" (program_access_decl ";")* "END_VAR"i ";"?

program_access_decl: access_name ":" _symbolic_variable ":" non_generic_type_name direction?

// B.1.6

sequential_function_chart: sfc_network sfc_network*

sfc_network: initial_step (step | transition | action | entry_action | exit_action)*

initial_step: "INITIAL_STEP"i step_name ":" (sequential_function_chart | statement_list | action_association) ";"? "END_STEP"i ";"?

step: "STEP"i step_name ":" (statement_list | action_association | sequential_function_chart)? ";"? "END_STEP"i ";"?

step_name: IDENTIFIER

action_association: action_name "(" action_qualifier? ("," indicator_name)* ")"

// trick to avoid collision of action_name; statements with END_block statements

action_name: /(?!END_)(\w+)/

action_qualifier: /N|R|S|P|P0|P1/ | (timed_qualifier "," action_time)

timed_qualifier: /L|D|SD|DS|SL/

action_time: duration | variable_name

indicator_name: variable_name

transition: (("TRANSITION"i ("(" "PRIORITY"i ":=" integer ")")? "FROM"i steps "TO"i steps transition_condition "END_TRANSITION"i ";"?)) | (("TRANSITION"i transition_name? ("(" "PRIORITY"i ":=" integer ")")? "FROM"i steps "TO"i steps transition_condition "END_TRANSITION"i ";"?))

transition_name: LOGICAL_NOT? IDENTIFIER

steps: step_name | (("(" step_name ("," step_name)* ")"))

transition_condition: ":=" (expression ";"?)

action: "ACTION"i action_name ":" function_block_body? "END_ACTION"i ";"?

entry_action: "ENTRY_ACTION"i function_block_body? "END_ACTION"i ";"?

exit_action: "EXIT_ACTION"i function_block_body? "END_ACTION"i ";"?

// B.1.7

configuration_name: IDENTIFIER

resource_type_name: IDENTIFIER

configuration_declaration: "CONFIGURATION"i configuration_name global_var_declarations? ((single_resource_declaration | (resource_declaration resource_declaration*))) access_declarations? instance_specific_initializations? "END_CONFIGURATION"i ";"?

resource_declaration: "RESOURCE"i resource_name "ON"i resource_type_name global_var_declarations? single_resource_declaration "END_RESOURCE"i ";"?

single_resource_declaration: (task_configuration ";")* program_configuration ";" (program_configuration ";")*

resource_name: IDENTIFIER

access_declarations: "VAR_ACCESS"i access_declaration ";" (access_declaration ";")* "END_VAR"i ";"?

access_declaration: pragma? access_name ":" access_path ":" non_generic_type_name direction?

access_path: ((resource_name ".")? direct_variable) | ((resource_name ".")? (program_name ".")? (fb_name ".")* _symbolic_variable)

global_var_reference: (resource_name ".")? global_var_name ("." structure_element_name)?

access_name: IDENTIFIER

program_output_reference: program_name "." _symbolic_variable

program_name: IDENTIFIER

READ_WRITE: "READ_WRITE"i

READ_ONLY: "READ_ONLY"i

direction: READ_WRITE | READ_ONLY

task_configuration: "TASK"i task_name task_initialization

task_name: IDENTIFIER

task_initialization: "(" ("SINGLE"i ":=" data_source ",")? ("INTERVAL"i ":=" data_source ",")? "PRIORITY"i ":=" integer ")"

data_source: _constant | global_var_reference | program_output_reference | direct_variable

program_configuration: "PROGRAM"i (retain | non_retain)? program_name ("WITH"i task_name)? ":" program_type_name ("(" prog_conf_elements ")")?

prog_conf_elements: prog_conf_element ("," prog_conf_element)*

prog_conf_element: fb_task | prog_cnxn

fb_task: fb_name "WITH"i task_name

prog_cnxn: (_symbolic_variable ":=" prog_data_source) | (_symbolic_variable "=>" data_sink)

prog_data_source: _constant | enumerated_value | global_var_reference | direct_variable

data_sink: global_var_reference | direct_variable

instance_specific_initializations: "VAR_CONFIG"i (instance_specific_init ";")* "END_VAR"i ";"?

instance_specific_init: pragma? resource_name "." program_name "." (fb_name ".")* (((variable_name location? ":" located_var_spec_init) | (fb_name ":" function_block_type_name ":=" structure_initialization)))

// B.2.1

instruction_list: il_instruction il_instruction*

il_instruction: (label ":")? (il_simple_operation | il_expression | il_jump_operation | il_fb_call | il_formal_funct_call | _il_return_operator)? EOL

EOL: "\n"

// TODO:

// CR : /\r/

// LF : /\n/

// NEWLINE: (CR? LF)+

label: IDENTIFIER

il_simple_operation: (_il_simple_operator il_operand?) | (_function_name il_operand_list?)

il_expression: _il_expr_operator "(" il_operand? EOL simple_instr_list? ")"

il_jump_operation: _il_jump_operator label

il_fb_call: _il_call_operator fb_name ("(" (((EOL il_param_list?) | (il_operand_list?))) ")")?

il_formal_funct_call: _function_name "(" EOL il_param_list? ")"

il_operand: constant | _variable | enumerated_value

il_operand_list: il_operand ("," il_operand)*

simple_instr_list: il_simple_instruction il_simple_instruction*

il_simple_instruction: (il_simple_operation | il_expression | il_formal_funct_call) EOL

il_param_list: il_param_instruction* il_param_last_instruction

il_param_instruction: (il_param_assignment | il_param_out_assignment) "," EOL

il_param_last_instruction: (il_param_assignment | il_param_out_assignment) EOL

il_param_assignment: il_assign_operator ((il_operand | (("(" EOL simple_instr_list ")"))))

il_param_out_assignment: il_assign_out_operator _variable

// B.2.2

IL_OPERATOR_LD: "LD"i

IL_OPERATOR_LDN: "LDN"i

IL_OPERATOR_ST: "ST"i

IL_OPERATOR_STN: "STN"i

IL_OPERATOR_NOT: "NOT"i

IL_OPERATOR_S: "S"i

IL_OPERATOR_R: "R"i

IL_OPERATOR_S1: "S1"i

IL_OPERATOR_R1: "R1"i

IL_OPERATOR_CLK: "CLK"i

IL_OPERATOR_CU: "CU"i

IL_OPERATOR_CD: "CD"i

IL_OPERATOR_PV: "PV"i

IL_OPERATOR_IN: "IN"i

IL_OPERATOR_PT: "PT"i

il_operator_andn: ("ANDN"i) | "&N"

il_operator_and: ("AND"i) | "&"

IL_OPERATOR_OR: "OR"i

IL_OPERATOR_XOR: "XOR"i

IL_OPERATOR_ORN: "ORN"i

IL_OPERATOR_XORN: "XORN"i

IL_OPERATOR_ADD: "ADD"i

IL_OPERATOR_SUB: "SUB"i

IL_OPERATOR_MUL: "MUL"i

IL_OPERATOR_DIV: "DIV"i

IL_OPERATOR_MOD: "MOD"i

IL_OPERATOR_GT: "GT"i

IL_OPERATOR_GE: "GE"i

IL_OPERATOR_EQ: "EQ"i

IL_OPERATOR_LT: "LT"i

IL_OPERATOR_LE: "LE"i

IL_OPERATOR_NE: "NE"i

// il_simple_operator ::= 'LD' | 'LDN' | 'ST' | 'STN' | 'NOT' | 'S' 

// | 'R' | 'S1' | 'R1' | 'CLK' | 'CU' | 'CD' | 'PV' 

// | 'IN' | 'PT' | 'AND' | '&' | 'OR' | 'XOR' |'ANDN' |'&N' |'ORN' 

// | 'XORN' | 'ADD' | 'SUB' | 'MUL' | 'DIV' | 'MOD' |'GT' |'GE' |'EQ ' 

// | 'LT' | 'LE' | 'NE' ;

_il_simple_operator: IL_OPERATOR_LD | IL_OPERATOR_LDN | IL_OPERATOR_ST | IL_OPERATOR_STN | IL_OPERATOR_NOT | IL_OPERATOR_S | IL_OPERATOR_R | IL_OPERATOR_S1 | IL_OPERATOR_R1 | IL_OPERATOR_CLK | IL_OPERATOR_CU | IL_OPERATOR_CD | IL_OPERATOR_PV | IL_OPERATOR_IN | IL_OPERATOR_PT | _il_expr_operator

_il_expr_operator: il_operator_andn | il_operator_and | IL_OPERATOR_OR | IL_OPERATOR_XOR | IL_OPERATOR_ORN | IL_OPERATOR_XORN | IL_OPERATOR_ADD | IL_OPERATOR_SUB | IL_OPERATOR_MUL | IL_OPERATOR_DIV | IL_OPERATOR_MOD | IL_OPERATOR_GT | IL_OPERATOR_GE | IL_OPERATOR_EQ | IL_OPERATOR_LT | IL_OPERATOR_LE | IL_OPERATOR_NE

il_assign_operator: variable_name ":="

il_assign_out_operator: IL_OPERATOR_NOT? variable_name "=>"

IL_OPERATOR_CAL: "CAL"i

IL_OPERATOR_CALC: "CALC"i

IL_OPERATOR_CALCN: "CALCN"i

_il_call_operator: IL_OPERATOR_CAL | IL_OPERATOR_CALC | IL_OPERATOR_CALCN

IL_OPERATOR_RET: "RET"i

IL_OPERATOR_RETC: "RETC"i

IL_OPERATOR_RETCN: "RETCN"i

_il_return_operator: IL_OPERATOR_RET | IL_OPERATOR_RETC | IL_OPERATOR_RETCN

IL_OPERATOR_JMP: "JMP"i

IL_OPERATOR_JMPC: "JMPC"i

IL_OPERATOR_JMPCN: "JMPCN"i

_il_jump_operator: IL_OPERATOR_JMP | IL_OPERATOR_JMPC | IL_OPERATOR_JMPCN

// B.3.1

LOGICAL_OR: "OR"i

LOGICAL_XOR: "XOR"i

LOGICAL_AND: "AND"i

LOGICAL_NOT: "NOT"i

MODULO: "MOD"i

equals: "="

equals_not: "<>"

less_or_equal: "<="

greater_or_equal: ">="

less_than: "<"

greater_than: ">"

adding: "+"

subtracting: "-"

multiply_with: "*"

divide_by: "/"

elevated_by: "**"

minus: "-"

plus: "+"

expression: _xor_expression (LOGICAL_OR _xor_expression)*

_xor_expression: _and_expression (LOGICAL_XOR _and_expression)*

_and_expression: _comparison (LOGICAL_AND _comparison)*

_comparison: _equ_expression ((equals | equals_not) _equ_expression)*

_equ_expression: _add_expression ((less_or_equal | greater_or_equal | less_than | greater_than) _add_expression)*

_add_expression: _term (_add_operator _term)*

_add_operator: adding | subtracting

_term: _power_expression (_multiply_operator _power_expression)*

_multiply_operator: MODULO | multiply_with | divide_by

_power_expression: _unary_expression (elevated_by _unary_expression)*

_unary_expression: _constant | (_unary_operator? _primary_expression)

_unary_operator: LOGICAL_NOT | minus | plus

function_call: (_function_name | multi_element_variable) "(" (param_assignment ("," param_assignment)* ","?)? ")"

// see also: fb_invocation

_primary_expression: (("(" expression ")")) | function_call | _variable | multi_element_variable

// B.3.2

statement_list: _statement _statement*

_statement: (";" ";"*) | method | assignment_statement | no_op_statement | set_statement | reset_statement | reference_assignment_statement | _subprogram_control_statement | _selection_statement | _iteration_statement | (action_name ";") | pragma

// B.3.2.1

no_op_statement: _variable ";"

assignment_statement: _variable ":=" (_variable ":=")* expression ";"

set_statement: _variable "S="i expression ";"

reset_statement: _variable "R="i expression ";"

reference_assignment_statement: _variable "REF="i expression ";"

// method ::= expression [dereferenced] '.' _identifier '(' ')';

method: expression "(" ")" ";"

// B.3.2.2

return_statement: "RETURN"i ";"?

_subprogram_control_statement: return_statement | (fb_invocation ";")

fb_invocation: (fb_name | multi_element_variable) "(" (param_assignment ("," param_assignment)* ","?)? ")"

param_assignment: ((("NOT"i)? variable_name "=>" (expression | multi_element_variable)?)) | ((variable_name ":=" (expression | multi_element_variable)?)) | (expression | multi_element_variable)

// B.3.2.3

_selection_statement: if_statement | case_statement

if_statement: "IF"i expression "THEN"i statement_list? ("ELSIF"i expression "THEN"i statement_list?)* ("ELSE"i statement_list?)? "END_IF"i ";"?

case_statement: "CASE"i expression "OF"i case_element case_element* ("ELSE"i statement_list?)? "END_CASE"i ";"?

case_element: case_list ":" statement_list?

case_list: case_list_element ("," case_list_element)*

case_list_element: subrange | integer_literal | enumerated_value | _dotted_name

// B.3.2.4

_iteration_statement: for_statement | while_statement | repeat_statement | exit_statement

for_statement: "FOR"i control_variable ":=" for_list "DO"i statement_list "END_FOR"i ";"?

control_variable: IDENTIFIER

for_list: expression "TO"i expression ("BY"i expression)?

while_statement: "WHILE"i expression "DO"i statement_list "END_WHILE"i ";"?

repeat_statement: "REPEAT"i statement_list "UNTIL"i expression "END_REPEAT"i ";"?

exit_statement: "EXIT"i ";"?

    start: iec_source

    MULTI_LINE_COMMENT: /\(\*.*?\*\)/s
    SINGLE_LINE_COMMENT: /\s*/ "//" /[^\n]/*

    // Ignore whitespace
    %import common.WS
    %ignore WS
    %ignore MULTI_LINE_COMMENT
    %ignore SINGLE_LINE_COMMENT
    
