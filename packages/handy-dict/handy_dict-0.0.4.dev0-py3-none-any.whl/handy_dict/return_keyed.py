# AUTOGENERATED! DO NOT EDIT! File to edit: 03_return_keyed.ipynb (unless otherwise specified).

__all__ = ['return_keyed']

# Cell
from .exceptions import KeyedException

# Cell
def return_keyed(dictionary, keys, ignore_non_existing=True):
    return_values = []
    path = []

    def return_keyed_inner(data, keys, return_values):
        if keys[0] not in data and ignore_non_existing:
            return

        path.append(keys[0])
        if len(keys) == 1:

            try:
                return_values.append(data[keys[0]])
            except KeyError:
                raise KeyedException("the ",path=path)

        else:
            if isinstance(data[keys[0]], list):
                for idx, obj in enumerate(data[keys[0]]):
                    path.append(idx)
                    return_keyed_inner(obj, keys[1:], return_values)
                    path.pop()
            else:
                return_keyed_inner(data[keys[0]], keys[1:], return_values)
        path.pop()

    return_keyed_inner(dictionary, keys, return_values)
    return return_values