# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cogneed-protos/cogneed-ks/services/convert_webm_to_wav.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='cogneed-protos/cogneed-ks/services/convert_webm_to_wav.proto',
  package='ai.cogneed.cloud.speech.v1',
  syntax='proto3',
  serialized_options=_b('\n\032ai.cogneed.cloud.speech.v1P\001'),
  serialized_pb=_b('\n<cogneed-protos/cogneed-ks/services/convert_webm_to_wav.proto\x12\x1a\x61i.cogneed.cloud.speech.v1\"!\n\x0e\x43onvertRequest\x12\x0f\n\x07\x63ontent\x18\x01 \x01(\x0c\"\"\n\x0f\x43onvertResponse\x12\x0f\n\x07\x63ontent\x18\x01 \x01(\x0c\x32}\n\x17\x43onvertWebmToWavService\x12\x62\n\x07\x63onvert\x12*.ai.cogneed.cloud.speech.v1.ConvertRequest\x1a+.ai.cogneed.cloud.speech.v1.ConvertResponseB\x1e\n\x1a\x61i.cogneed.cloud.speech.v1P\x01\x62\x06proto3')
)




_CONVERTREQUEST = _descriptor.Descriptor(
  name='ConvertRequest',
  full_name='ai.cogneed.cloud.speech.v1.ConvertRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='content', full_name='ai.cogneed.cloud.speech.v1.ConvertRequest.content', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=92,
  serialized_end=125,
)


_CONVERTRESPONSE = _descriptor.Descriptor(
  name='ConvertResponse',
  full_name='ai.cogneed.cloud.speech.v1.ConvertResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='content', full_name='ai.cogneed.cloud.speech.v1.ConvertResponse.content', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=127,
  serialized_end=161,
)

DESCRIPTOR.message_types_by_name['ConvertRequest'] = _CONVERTREQUEST
DESCRIPTOR.message_types_by_name['ConvertResponse'] = _CONVERTRESPONSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

ConvertRequest = _reflection.GeneratedProtocolMessageType('ConvertRequest', (_message.Message,), dict(
  DESCRIPTOR = _CONVERTREQUEST,
  __module__ = 'cogneed_protos.cogneed_ks.services.convert_webm_to_wav_pb2'
  # @@protoc_insertion_point(class_scope:ai.cogneed.cloud.speech.v1.ConvertRequest)
  ))
_sym_db.RegisterMessage(ConvertRequest)

ConvertResponse = _reflection.GeneratedProtocolMessageType('ConvertResponse', (_message.Message,), dict(
  DESCRIPTOR = _CONVERTRESPONSE,
  __module__ = 'cogneed_protos.cogneed_ks.services.convert_webm_to_wav_pb2'
  # @@protoc_insertion_point(class_scope:ai.cogneed.cloud.speech.v1.ConvertResponse)
  ))
_sym_db.RegisterMessage(ConvertResponse)


DESCRIPTOR._options = None

_CONVERTWEBMTOWAVSERVICE = _descriptor.ServiceDescriptor(
  name='ConvertWebmToWavService',
  full_name='ai.cogneed.cloud.speech.v1.ConvertWebmToWavService',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  serialized_start=163,
  serialized_end=288,
  methods=[
  _descriptor.MethodDescriptor(
    name='convert',
    full_name='ai.cogneed.cloud.speech.v1.ConvertWebmToWavService.convert',
    index=0,
    containing_service=None,
    input_type=_CONVERTREQUEST,
    output_type=_CONVERTRESPONSE,
    serialized_options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_CONVERTWEBMTOWAVSERVICE)

DESCRIPTOR.services_by_name['ConvertWebmToWavService'] = _CONVERTWEBMTOWAVSERVICE

# @@protoc_insertion_point(module_scope)
