# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _anime4kcpp
else:
    import _anime4kcpp

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Anime4K(object):
    r"""Proxy of C++ Anime4K class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Anime4K self, int passes=2, double strengthColor=0.3, double strengthGradient=1.0, double zoomFactor=2.0, bool fastMode=False, bool videoMode=False, unsigned int maxThreads=std::thread::hardware_concurrency()) -> Anime4K"""
        _anime4kcpp.Anime4K_swiginit(self, _anime4kcpp.new_Anime4K(*args))

    def loadVideo(self, srcFile: "std::string const &") -> "void":
        r"""loadVideo(Anime4K self, std::string const & srcFile)"""
        return _anime4kcpp.Anime4K_loadVideo(self, srcFile)

    def loadImage(self, srcFile: "std::string const &") -> "void":
        r"""loadImage(Anime4K self, std::string const & srcFile)"""
        return _anime4kcpp.Anime4K_loadImage(self, srcFile)

    def setVideoSaveInfo(self, dstFile: "std::string const &") -> "void":
        r"""setVideoSaveInfo(Anime4K self, std::string const & dstFile)"""
        return _anime4kcpp.Anime4K_setVideoSaveInfo(self, dstFile)

    def saveImage(self, dstFile: "std::string const &") -> "void":
        r"""saveImage(Anime4K self, std::string const & dstFile)"""
        return _anime4kcpp.Anime4K_saveImage(self, dstFile)

    def saveVideo(self) -> "void":
        r"""saveVideo(Anime4K self)"""
        return _anime4kcpp.Anime4K_saveVideo(self)

    def showInfo(self) -> "void":
        r"""showInfo(Anime4K self)"""
        return _anime4kcpp.Anime4K_showInfo(self)

    def showImage(self) -> "void":
        r"""showImage(Anime4K self)"""
        return _anime4kcpp.Anime4K_showImage(self)

    def process(self) -> "void":
        r"""process(Anime4K self)"""
        return _anime4kcpp.Anime4K_process(self)
    __swig_destroy__ = _anime4kcpp.delete_Anime4K

# Register Anime4K in _anime4kcpp:
_anime4kcpp.Anime4K_swigregister(Anime4K)



