# AUTOGENERATED! DO NOT EDIT! File to edit: 06_feature_selection.ipynb (unless otherwise specified).

__all__ = ['FeatureSelection']

# Cell
import pandas as pd
import numpy as np

from typing import List, Dict
from sklearn.datasets import load_boston

from .core import *
from .data import *
from .model import *
from .external_data import *

# Cell
class FeatureSelection:
    def __init__(self, model_args:Dict, threshold:int=3):
        self.model_args = model_args
        self.threshold  = threshold

    def train(self, X:pd.DataFrame, y:pd.Series):
        model = Model(**self.model_args)
        self.trained_model = model.fit(X, y)
        return self.trained_model

    def get_feature_importances(self, model, feature_names:List)->pd.DataFrame:
        feat_imp = model.feature_importance(importance_type='gain')
        feat_df  = pd.DataFrame({'features': feature_names,
                                 'imp(gain)': feat_imp
                                })
        return feat_df

    def get_feature_names(self, X:pd.DataFrame)->List:
        return list(sorted(X.columns))

    def add_ratio_gain(self, feat_imp:pd.DataFrame, feat_imp_useless:pd.DataFrame)->pd.DataFrame:
        tmp_df = feat_imp.copy()
        tmp_df = tmp_df.assign(imp_gain_useless=feat_imp_useless['imp(gain)'].values)
        tmp_df = tmp_df.assign(ratio=feat_imp_useless['imp(gain)']/feat_imp['imp(gain)'])
        return tmp_df

    def filter_features(self, ratio_df:pd.DataFrame)->List:
        return list(ratio_df.loc[(ratio_df.ratio <= self.threshold), 'features'])

    def select_features(self, X:pd.DataFrame, y:pd.Series)->List:
        model = self.train(X, y)

        shuffled_y = _shuffle(y.copy())
        useless_model = self.train(X, shuffled_y)

        feature_names = self.get_feature_names(X)
        feat_imp = self.get_feature_importances(model, feature_names)
        feat_imp_useless = self.get_feature_importances(useless_model, feature_names)

        self.ratio_df = self.add_ratio_gain(feat_imp, feat_imp_useless)
        selected_features = self.filter_features(self.ratio_df)

        return selected_features