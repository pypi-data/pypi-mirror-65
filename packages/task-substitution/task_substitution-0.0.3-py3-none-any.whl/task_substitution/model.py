# AUTOGENERATED! DO NOT EDIT! File to edit: 02_model.ipynb (unless otherwise specified).

__all__ = ['Model']

# Cell
import pandas as pd
import numpy as np
import string

import lightgbm as lgb
from sklearn.model_selection import KFold

from .data import *

# Cell
class Model:
    def __init__(self, **model_kwargs):
        self.params = model_kwargs
        self.num_boost_round = self.params['num_boost_round']

        # remove num estimators key from the model parameters
        del self.params['num_boost_round']

    def fit(self, X:pd.DataFrame, y:pd.Series):
        ltrain = lgb.Dataset(X, y)
        self.model  = lgb.train(self.params, ltrain, self.num_boost_round)

        return self.model

    def cv(self, X:pd.DataFrame, y:pd.Series, perf_fn, **cv_params)->np.ndarray:
        kf = KFold(**cv_params)
        fold_perfs = []

        for index, (itr, ite) in enumerate(kf.split(X)):
            print(f'Fold: {index}')

            Xtr, ytr   = X.iloc[itr], y.iloc[itr]
            Xval, yval = X.iloc[ite], y.iloc[ite]

            ltrain = lgb.Dataset(Xtr, ytr)

            model = lgb.train(self.params, ltrain, self.num_boost_round)
            preds = model.predict(Xval)

            fold_perf = perf_fn(yval, preds)
            print(f'Performance: {fold_perf}')

            fold_perfs.append(fold_perf)

        print(f'Mean performance: {np.mean(fold_perfs)}, Std performance: {np.std(fold_perfs)}')

        return np.array(fold_perfs)

    def predict(self, Xtest)->np.ndarray:
        preds = self.model.predict(Xtest)

        return np.array(preds)