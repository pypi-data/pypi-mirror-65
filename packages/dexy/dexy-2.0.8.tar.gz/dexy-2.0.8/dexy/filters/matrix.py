from bs4 import BeautifulSoup
from dexy.filters.api import ApiFilter
import asyncio
import json
import mimetypes
import markdown

try:
    from nio import AsyncClient
    AVAILABLE = True
except ImportError:
    AVAILABLE = False

async def main_nio(homeserver, user, password, room_id, ext, mimetype, data_provider, content, log_fn):
    client = AsyncClient(homeserver, user)

    await client.login(password)

    upload_response, decrypt_info = None, None
    if data_provider:
        upload_response, decrypt_info = await client.upload(
                data_provider,
                mimetype
                )

        content['url'] = upload_response.content_uri

    log_fn("uploading message to room %s: %s" % (room_id, str(content)))

    response = await client.room_send(
        room_id=room_id,
        message_type="m.room.message",
        content=content
    )
    await client.close()
    
    return {
            "event_id" : response.event_id,
            "room_id" : response.room_id
            }

class MatrixFilter(ApiFilter):
    """
    Filter for posting text, files, or images to a matrix room. Uses matrix-nio

    Create a .dexyapis JSON file in your HOME dir with format:

    {
        "matrix": {
            "homeserver" : "https://example.org",
            "username" :  "@example:example.org",
            "password" : "sekret1!"
        }
    }

    """
    aliases = ['matrix']

    _settings = {
            'room-id' : ("The room id (NOT the room name!) to post to.", "!yMPKbtdRlqJWpwCcvg:matrix.org"),
            'api-key-name' : 'matrix',
            'input-extensions' : ['.*'],
            'output-extensions' :  ['.json']
            }

    def is_active(self):
        return AVAILABLE

    def data_provider(self, a, b):
        # FIXME currently ignoring params a, b
        return self.input_data.storage.data_file()

    def process(self):
        if self.input_data.ext in ('.html'):
            text = str(self.input_data)
            soup = BeautifulSoup(text, 'html.parser')

            # https://matrix.org/docs/spec/client_server/r0.6.0#m-room-message-msgtypes
            # "should" do this in bs4 but this works
            # FIXME? bg-color is ignored in riot
            modified_html = text.replace("style=\"color: ", "data-mx-color=\"").replace("style=\"background: ", "data-mx-bg-color=\"")

            content = {
                    'msgtype' : 'm.text',
                    'format' : 'org.matrix.custom.html',
                    'body' : soup.get_text(),
                    'formatted_body' : modified_html
                    }

        ### "matrix-markdown"
        elif self.input_data.ext in ('.md'):
            text = str(self.input_data)
            html = markdown.markdown(text, extensions=['fenced_code'])
            soup = BeautifulSoup(html, 'html.parser')
            for code_block in soup.find_all("code"):
                code_block['class'] = "language-%s" % code_block['class'][0]
                code_block.string = code_block.string.lstrip()
            content = {
                    'msgtype' : 'm.text',
                    'format' : 'org.matrix.custom.html',
                    'body' : soup.get_text(),
                    'formatted_body' : str(soup)
                    }
        ### @end

        elif self.input_data.ext in ('.txt'):
            text = str(self.input_data)
            content = {
                    'msgtype' : "m.text",
                    'body' : text
                    }

        elif self.input_data.ext in ('.png', '.jpeg', '.jpg', '.bmp'):
            if hasattr(self.doc, 'created_by_doc'):
                description = "image %s generated by script %s" % (self.input_data.name, self.doc.created_by_doc.name)
            else:
                description = "automatically generated image %s" % self.input_data.name

            content = {
                    'msgtype' : 'm.image',
                    'body' : description
                    }

        else:
            content = {
                    'msgtype' : 'm.file',
                    'filename' : self.input_data.name,
                    'body' : self.input_data.name
                    }

        loop = asyncio.get_event_loop()
        response = loop.run_until_complete(main_nio(
            homeserver=self.read_param('homeserver'),
            user=self.read_param('username'),
            password=self.read_param('password'),
            room_id=self.setting('room-id'),
            ext=self.input_data.ext,
            mimetype=mimetypes.guess_type(self.input_data.name)[0],
            data_provider=self.data_provider,
            content=content,
            log_fn=self.log_debug
            ))

        self.output_data.set_data(json.dumps(response))
