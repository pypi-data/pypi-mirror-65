_task_name_ = string_kw(default="skymatch")
input = string_kw(default="*_flt.fits", comment="Input image names")
skymethod = option_kw("globalmin+match","localmin", "globalmin", "match", default="globalmin+match", comment="Sky computation method")
match_down = boolean_kw(default=True, comment= "Match to the image with lowest or highest sky?")
skystat = option_kw("mean", "median", "mode", "midpt", default="mode", comment="Sky statistics function")
lower = float_or_none_kw(default=None, comment= "Lower limit of usable data for sky (always in data units)")
upper = float_or_none_kw(default=None, comment= "Upper limit of usable data for sky (always in data units)")
nclip = integer_kw(default=5, comment= "Number of clipping iterations")
lsigma = float_kw(default=4.0, comment="Lower side clipping factor (in sigma)")
usigma = float_kw(default=4.0, comment="Upper side clipping factor (in sigma)")
binwidth = float_kw(default=0.1, comment= "Bin width for sampling sky statistics (in sigma)")
skyuser_kwd = string_kw(default="SKYUSER", comment="KEYWORD for storing (updating with) sky subtraction value.")
units_kwd = string_kw(default="BUNIT", comment="KEYWORD indicating the units of data.")
invsens_kwd = string_kw(default="", comment="KEYWORD indicating inverse sensitivity of detectors.")
readonly = boolean_kw(default=True, comment= "Do apply changes or run in read-only mode?")
#readonly = boolean_kw(default=True, triggers='_rule1_', comment= "Do apply changes or run in read-only mode?")
#subtractsky = boolean_kw(default=False, active_if='_rule1_', comment= "Subtract computed sky from image data?")
subtractsky = boolean_kw(default=False, comment= "Subtract computed sky from image data?")
dq_bits = string_kw(default="0", comment= "Integer mask bit values considered good pixels in DQ array")
optimize = option_kw("balanced", "speed", "inmemory", default="balanced", comment="Memory/speed optimization mode.")
clobber = boolean_kw(default=True, comment= "Overwrite existing files when converting from GEIS or WAIVER FITS?")
clean = boolean_kw(default=True, comment= "Delete temporary files upon finish?")
verbose = boolean_kw(default=True, comment= "Verbose")
logfile = string_kw(default='skymatch.log', comment="File for logging the processing")
[ _RULES_ ]
#_rule1_ = string_kw(default=True, code='tyfn={"yes":False, "no":True}; OUT = tyfn[VAL]')
