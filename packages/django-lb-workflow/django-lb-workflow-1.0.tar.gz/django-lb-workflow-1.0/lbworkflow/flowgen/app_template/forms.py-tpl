from django import forms[% if item_list %]
from django.forms.models import inlineformset_factory[% endif %]
from crispy_forms.bootstrap import StrictButton
from crispy_forms.layout import Layout

from lbutils import BootstrapFormHelperMixin
from lbworkflow.forms import WorkflowFormMixin
from lbworkflow.forms import BSQuickSearchForm

from .models import [[ class_name ]]
[% if item_list %][% for item in item_list %]
from .models import [[ item.class_name ]]
[% endfor %][% endif %]


class SearchForm(BSQuickSearchForm):
    def layout(self):
        self.helper.layout = Layout(
            'q_quick_search_kw',
            StrictButton('Search', type="submit", css_class='btn-sm btn-default'),
            StrictButton('Export', type="submit", name="export", css_class='btn-sm btn-default'),
        )


class [[ class_name ]]Form(BootstrapFormHelperMixin, WorkflowFormMixin, forms.ModelForm):

    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        self.init_crispy_helper()
        self.layout_fields([
            [% for f1, f2 in grouped_fields %]
            ['[[ f1.name ]]', '[[ f2.name ]]'],
            [% endfor %]
        ])

    class Meta:
        model = [[ class_name ]]
        fields = [
            [[ field_names ]]
        ]
[% if item_list %][% for item in item_list %]

class [[ item.class_name ]]Form(BootstrapFormHelperMixin, WorkflowFormMixin, forms.ModelForm):

    class Meta:
        model = [[ item.class_name ]]
        fields = [
          [[ item.field_names ]]
        ]


def get_[[ item.lowercase_class_name ]]_formset_class(**kwargs):
    params = {'extra': 1, 'can_delete': True}
    params.update(kwargs)
    return inlineformset_factory(
            [[ class_name ]], [[ item.class_name ]],
            form=[[ item.class_name ]]Form, **params)
[% endfor %][% endif %]
