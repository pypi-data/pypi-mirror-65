# coding: utf-8

"""
    VeeRoute.LSS Lastmile

    Программный интерфейс для универсального планирования задач последней мили  # noqa: E501

    OpenAPI spec version: 2.5.156470
    Contact: support@veeroute.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Performer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'max_work_shifts': 'int',
        'performer_features': 'list[str]',
        'transport_restrictions': 'list[str]',
        'own_transport_type': 'TransportType'
    }

    attribute_map = {
        'key': 'key',
        'max_work_shifts': 'max_work_shifts',
        'performer_features': 'performer_features',
        'transport_restrictions': 'transport_restrictions',
        'own_transport_type': 'own_transport_type'
    }

    def __init__(self, key=None, max_work_shifts=None, performer_features=None, transport_restrictions=None, own_transport_type=None):  # noqa: E501
        """Performer - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._max_work_shifts = None
        self._performer_features = None
        self._transport_restrictions = None
        self._own_transport_type = None
        self.discriminator = None
        self.key = key
        if max_work_shifts is not None:
            self.max_work_shifts = max_work_shifts
        if performer_features is not None:
            self.performer_features = performer_features
        if transport_restrictions is not None:
            self.transport_restrictions = transport_restrictions
        if own_transport_type is not None:
            self.own_transport_type = own_transport_type

    @property
    def key(self):
        """Gets the key of this Performer.  # noqa: E501

        Ключ исполнителя, уникальный идентификатор.  # noqa: E501

        :return: The key of this Performer.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Performer.

        Ключ исполнителя, уникальный идентификатор.  # noqa: E501

        :param key: The key of this Performer.  # noqa: E501
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def max_work_shifts(self):
        """Gets the max_work_shifts of this Performer.  # noqa: E501

        Ограничение количества смен исполнителя в одном планировании.  # noqa: E501

        :return: The max_work_shifts of this Performer.  # noqa: E501
        :rtype: int
        """
        return self._max_work_shifts

    @max_work_shifts.setter
    def max_work_shifts(self, max_work_shifts):
        """Sets the max_work_shifts of this Performer.

        Ограничение количества смен исполнителя в одном планировании.  # noqa: E501

        :param max_work_shifts: The max_work_shifts of this Performer.  # noqa: E501
        :type: int
        """

        self._max_work_shifts = max_work_shifts

    @property
    def performer_features(self):
        """Gets the performer_features of this Performer.  # noqa: E501

        Список возможностей исполнителя, используется для проверки совместимости исполнителя с заказами и транспортом.  # noqa: E501

        :return: The performer_features of this Performer.  # noqa: E501
        :rtype: list[str]
        """
        return self._performer_features

    @performer_features.setter
    def performer_features(self, performer_features):
        """Sets the performer_features of this Performer.

        Список возможностей исполнителя, используется для проверки совместимости исполнителя с заказами и транспортом.  # noqa: E501

        :param performer_features: The performer_features of this Performer.  # noqa: E501
        :type: list[str]
        """

        self._performer_features = performer_features

    @property
    def transport_restrictions(self):
        """Gets the transport_restrictions of this Performer.  # noqa: E501

        Список необходимых требований к транспорту. Используется для проверки совместимости транспорта с заказом.   # noqa: E501

        :return: The transport_restrictions of this Performer.  # noqa: E501
        :rtype: list[str]
        """
        return self._transport_restrictions

    @transport_restrictions.setter
    def transport_restrictions(self, transport_restrictions):
        """Sets the transport_restrictions of this Performer.

        Список необходимых требований к транспорту. Используется для проверки совместимости транспорта с заказом.   # noqa: E501

        :param transport_restrictions: The transport_restrictions of this Performer.  # noqa: E501
        :type: list[str]
        """

        self._transport_restrictions = transport_restrictions

    @property
    def own_transport_type(self):
        """Gets the own_transport_type of this Performer.  # noqa: E501


        :return: The own_transport_type of this Performer.  # noqa: E501
        :rtype: TransportType
        """
        return self._own_transport_type

    @own_transport_type.setter
    def own_transport_type(self, own_transport_type):
        """Sets the own_transport_type of this Performer.


        :param own_transport_type: The own_transport_type of this Performer.  # noqa: E501
        :type: TransportType
        """

        self._own_transport_type = own_transport_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Performer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Performer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
