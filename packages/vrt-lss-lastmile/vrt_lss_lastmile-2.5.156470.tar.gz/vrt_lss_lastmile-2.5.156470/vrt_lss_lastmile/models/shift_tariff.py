# coding: utf-8

"""
    VeeRoute.LSS Lastmile

    Программный интерфейс для универсального планирования задач последней мили  # noqa: E501

    OpenAPI spec version: 2.5.156470
    Contact: support@veeroute.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ShiftTariff(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cost_per_shift': 'float',
        'constraints': 'list[ShiftTariffConstraints]'
    }

    attribute_map = {
        'cost_per_shift': 'cost_per_shift',
        'constraints': 'constraints'
    }

    def __init__(self, cost_per_shift=None, constraints=None):  # noqa: E501
        """ShiftTariff - a model defined in Swagger"""  # noqa: E501
        self._cost_per_shift = None
        self._constraints = None
        self.discriminator = None
        self.cost_per_shift = cost_per_shift
        self.constraints = constraints

    @property
    def cost_per_shift(self):
        """Gets the cost_per_shift of this ShiftTariff.  # noqa: E501

        Цена за использование смены, денежная единица  # noqa: E501

        :return: The cost_per_shift of this ShiftTariff.  # noqa: E501
        :rtype: float
        """
        return self._cost_per_shift

    @cost_per_shift.setter
    def cost_per_shift(self, cost_per_shift):
        """Sets the cost_per_shift of this ShiftTariff.

        Цена за использование смены, денежная единица  # noqa: E501

        :param cost_per_shift: The cost_per_shift of this ShiftTariff.  # noqa: E501
        :type: float
        """
        if cost_per_shift is None:
            raise ValueError("Invalid value for `cost_per_shift`, must not be `None`")  # noqa: E501

        self._cost_per_shift = cost_per_shift

    @property
    def constraints(self):
        """Gets the constraints of this ShiftTariff.  # noqa: E501

        Список ограничений тарифа  # noqa: E501

        :return: The constraints of this ShiftTariff.  # noqa: E501
        :rtype: list[ShiftTariffConstraints]
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this ShiftTariff.

        Список ограничений тарифа  # noqa: E501

        :param constraints: The constraints of this ShiftTariff.  # noqa: E501
        :type: list[ShiftTariffConstraints]
        """
        if constraints is None:
            raise ValueError("Invalid value for `constraints`, must not be `None`")  # noqa: E501

        self._constraints = constraints

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShiftTariff, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShiftTariff):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
