# coding: utf-8

"""
    VeeRoute.LSS Lastmile

    Программный интерфейс для универсального планирования задач последней мили  # noqa: E501

    OpenAPI spec version: 2.5.156470
    Contact: support@veeroute.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ShiftTariffConstraints(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stage_length': 'float',
        'cost_per_unit': 'float'
    }

    attribute_map = {
        'stage_length': 'stage_length',
        'cost_per_unit': 'cost_per_unit'
    }

    def __init__(self, stage_length=None, cost_per_unit=None):  # noqa: E501
        """ShiftTariffConstraints - a model defined in Swagger"""  # noqa: E501
        self._stage_length = None
        self._cost_per_unit = None
        self.discriminator = None
        self.stage_length = stage_length
        self.cost_per_unit = cost_per_unit

    @property
    def stage_length(self):
        """Gets the stage_length of this ShiftTariffConstraints.  # noqa: E501

        Длина оплачиваемого периода, минута для исполнителя, метры для транспорта  # noqa: E501

        :return: The stage_length of this ShiftTariffConstraints.  # noqa: E501
        :rtype: float
        """
        return self._stage_length

    @stage_length.setter
    def stage_length(self, stage_length):
        """Sets the stage_length of this ShiftTariffConstraints.

        Длина оплачиваемого периода, минута для исполнителя, метры для транспорта  # noqa: E501

        :param stage_length: The stage_length of this ShiftTariffConstraints.  # noqa: E501
        :type: float
        """
        if stage_length is None:
            raise ValueError("Invalid value for `stage_length`, must not be `None`")  # noqa: E501

        self._stage_length = stage_length

    @property
    def cost_per_unit(self):
        """Gets the cost_per_unit of this ShiftTariffConstraints.  # noqa: E501

        Стоимость внутри оплачиваемого периода, для исполнителя - денежная единица в минуту работы, для транспорта - денежная единица за метр пути  # noqa: E501

        :return: The cost_per_unit of this ShiftTariffConstraints.  # noqa: E501
        :rtype: float
        """
        return self._cost_per_unit

    @cost_per_unit.setter
    def cost_per_unit(self, cost_per_unit):
        """Sets the cost_per_unit of this ShiftTariffConstraints.

        Стоимость внутри оплачиваемого периода, для исполнителя - денежная единица в минуту работы, для транспорта - денежная единица за метр пути  # noqa: E501

        :param cost_per_unit: The cost_per_unit of this ShiftTariffConstraints.  # noqa: E501
        :type: float
        """
        if cost_per_unit is None:
            raise ValueError("Invalid value for `cost_per_unit`, must not be `None`")  # noqa: E501

        self._cost_per_unit = cost_per_unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShiftTariffConstraints, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShiftTariffConstraints):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
