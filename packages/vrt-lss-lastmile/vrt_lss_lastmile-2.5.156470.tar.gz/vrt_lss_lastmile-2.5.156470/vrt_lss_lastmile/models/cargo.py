# coding: utf-8

"""
    VeeRoute.LSS Lastmile

    Программный интерфейс для универсального планирования задач последней мили  # noqa: E501

    OpenAPI spec version: 2.5.156470
    Contact: support@veeroute.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Cargo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'capacity': 'Capacity',
        'width': 'float',
        'height': 'float',
        'length': 'float',
        'max_storage_time': 'int',
        'restrictions': 'list[str]'
    }

    attribute_map = {
        'key': 'key',
        'capacity': 'capacity',
        'width': 'width',
        'height': 'height',
        'length': 'length',
        'max_storage_time': 'max_storage_time',
        'restrictions': 'restrictions'
    }

    def __init__(self, key=None, capacity=None, width=0, height=0, length=0, max_storage_time=None, restrictions=None):  # noqa: E501
        """Cargo - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._capacity = None
        self._width = None
        self._height = None
        self._length = None
        self._max_storage_time = None
        self._restrictions = None
        self.discriminator = None
        self.key = key
        self.capacity = capacity
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if length is not None:
            self.length = length
        if max_storage_time is not None:
            self.max_storage_time = max_storage_time
        if restrictions is not None:
            self.restrictions = restrictions

    @property
    def key(self):
        """Gets the key of this Cargo.  # noqa: E501

        Ключ груза, уникальный идентификатор  # noqa: E501

        :return: The key of this Cargo.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Cargo.

        Ключ груза, уникальный идентификатор  # noqa: E501

        :param key: The key of this Cargo.  # noqa: E501
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def capacity(self):
        """Gets the capacity of this Cargo.  # noqa: E501


        :return: The capacity of this Cargo.  # noqa: E501
        :rtype: Capacity
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this Cargo.


        :param capacity: The capacity of this Cargo.  # noqa: E501
        :type: Capacity
        """
        if capacity is None:
            raise ValueError("Invalid value for `capacity`, must not be `None`")  # noqa: E501

        self._capacity = capacity

    @property
    def width(self):
        """Gets the width of this Cargo.  # noqa: E501

        Ширина в метрах, используется для проверки вместимости в отсек транспорта  # noqa: E501

        :return: The width of this Cargo.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Cargo.

        Ширина в метрах, используется для проверки вместимости в отсек транспорта  # noqa: E501

        :param width: The width of this Cargo.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this Cargo.  # noqa: E501

        Высота в метрах, используется для проверки вместимости в отсек транспорта  # noqa: E501

        :return: The height of this Cargo.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Cargo.

        Высота в метрах, используется для проверки вместимости в отсек транспорта  # noqa: E501

        :param height: The height of this Cargo.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def length(self):
        """Gets the length of this Cargo.  # noqa: E501

        Длина в метрах, используется для проверки вместимости в отсек транспорта  # noqa: E501

        :return: The length of this Cargo.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Cargo.

        Длина в метрах, используется для проверки вместимости в отсек транспорта  # noqa: E501

        :param length: The length of this Cargo.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def max_storage_time(self):
        """Gets the max_storage_time of this Cargo.  # noqa: E501

        Максимальное время хранения на борту, в минутах.  Если не задано - ограничение не учитывается.   # noqa: E501

        :return: The max_storage_time of this Cargo.  # noqa: E501
        :rtype: int
        """
        return self._max_storage_time

    @max_storage_time.setter
    def max_storage_time(self, max_storage_time):
        """Sets the max_storage_time of this Cargo.

        Максимальное время хранения на борту, в минутах.  Если не задано - ограничение не учитывается.   # noqa: E501

        :param max_storage_time: The max_storage_time of this Cargo.  # noqa: E501
        :type: int
        """

        self._max_storage_time = max_storage_time

    @property
    def restrictions(self):
        """Gets the restrictions of this Cargo.  # noqa: E501

        Список необходимых требований к отсеку, который может перевозить груз.  # noqa: E501

        :return: The restrictions of this Cargo.  # noqa: E501
        :rtype: list[str]
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this Cargo.

        Список необходимых требований к отсеку, который может перевозить груз.  # noqa: E501

        :param restrictions: The restrictions of this Cargo.  # noqa: E501
        :type: list[str]
        """

        self._restrictions = restrictions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Cargo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cargo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
