# coding: utf-8

"""
    VeeRoute.LSS Lastmile

    Программный интерфейс для универсального планирования задач последней мили  # noqa: E501

    OpenAPI spec version: 2.5.156470
    Contact: support@veeroute.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Measurements(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'driving_time': 'int',
        'waiting_time': 'int',
        'working_time': 'int',
        'arriving_time': 'int',
        'departure_time': 'int',
        'total_time': 'int',
        'distance': 'int',
        'time_window': 'TimeWindow'
    }

    attribute_map = {
        'driving_time': 'driving_time',
        'waiting_time': 'waiting_time',
        'working_time': 'working_time',
        'arriving_time': 'arriving_time',
        'departure_time': 'departure_time',
        'total_time': 'total_time',
        'distance': 'distance',
        'time_window': 'time_window'
    }

    def __init__(self, driving_time=None, waiting_time=None, working_time=None, arriving_time=None, departure_time=None, total_time=None, distance=None, time_window=None):  # noqa: E501
        """Measurements - a model defined in Swagger"""  # noqa: E501
        self._driving_time = None
        self._waiting_time = None
        self._working_time = None
        self._arriving_time = None
        self._departure_time = None
        self._total_time = None
        self._distance = None
        self._time_window = None
        self.discriminator = None
        self.driving_time = driving_time
        self.waiting_time = waiting_time
        self.working_time = working_time
        self.arriving_time = arriving_time
        self.departure_time = departure_time
        self.total_time = total_time
        self.distance = distance
        if time_window is not None:
            self.time_window = time_window

    @property
    def driving_time(self):
        """Gets the driving_time of this Measurements.  # noqa: E501

        Продолжительность времени вождения в минутах. Для остановки - время движения от предыдущей остановки до текущей локации.   # noqa: E501

        :return: The driving_time of this Measurements.  # noqa: E501
        :rtype: int
        """
        return self._driving_time

    @driving_time.setter
    def driving_time(self, driving_time):
        """Sets the driving_time of this Measurements.

        Продолжительность времени вождения в минутах. Для остановки - время движения от предыдущей остановки до текущей локации.   # noqa: E501

        :param driving_time: The driving_time of this Measurements.  # noqa: E501
        :type: int
        """
        if driving_time is None:
            raise ValueError("Invalid value for `driving_time`, must not be `None`")  # noqa: E501

        self._driving_time = driving_time

    @property
    def waiting_time(self):
        """Gets the waiting_time of this Measurements.  # noqa: E501

        Суммарное время ожидания по всем локациям. Для остановки - продолжительность ожидания исполнения работы на локациии в минутах.   # noqa: E501

        :return: The waiting_time of this Measurements.  # noqa: E501
        :rtype: int
        """
        return self._waiting_time

    @waiting_time.setter
    def waiting_time(self, waiting_time):
        """Sets the waiting_time of this Measurements.

        Суммарное время ожидания по всем локациям. Для остановки - продолжительность ожидания исполнения работы на локациии в минутах.   # noqa: E501

        :param waiting_time: The waiting_time of this Measurements.  # noqa: E501
        :type: int
        """
        if waiting_time is None:
            raise ValueError("Invalid value for `waiting_time`, must not be `None`")  # noqa: E501

        self._waiting_time = waiting_time

    @property
    def working_time(self):
        """Gets the working_time of this Measurements.  # noqa: E501

        Суммарное время выполнения работ на всех локациях, входящих в рейс. Для остановки - время, затраченное на непосредственное выполнение работ на локации.   # noqa: E501

        :return: The working_time of this Measurements.  # noqa: E501
        :rtype: int
        """
        return self._working_time

    @working_time.setter
    def working_time(self, working_time):
        """Sets the working_time of this Measurements.

        Суммарное время выполнения работ на всех локациях, входящих в рейс. Для остановки - время, затраченное на непосредственное выполнение работ на локации.   # noqa: E501

        :param working_time: The working_time of this Measurements.  # noqa: E501
        :type: int
        """
        if working_time is None:
            raise ValueError("Invalid value for `working_time`, must not be `None`")  # noqa: E501

        self._working_time = working_time

    @property
    def arriving_time(self):
        """Gets the arriving_time of this Measurements.  # noqa: E501

        Суммарное время на подъезд\\парковку на локациях. Для остановки - время, затраченное на подъезд\\парковку на локации.   # noqa: E501

        :return: The arriving_time of this Measurements.  # noqa: E501
        :rtype: int
        """
        return self._arriving_time

    @arriving_time.setter
    def arriving_time(self, arriving_time):
        """Sets the arriving_time of this Measurements.

        Суммарное время на подъезд\\парковку на локациях. Для остановки - время, затраченное на подъезд\\парковку на локации.   # noqa: E501

        :param arriving_time: The arriving_time of this Measurements.  # noqa: E501
        :type: int
        """
        if arriving_time is None:
            raise ValueError("Invalid value for `arriving_time`, must not be `None`")  # noqa: E501

        self._arriving_time = arriving_time

    @property
    def departure_time(self):
        """Gets the departure_time of this Measurements.  # noqa: E501

        Суммарное время на отдьезд от локаций. Для остановки - время, затраченное на отдьезд от локации.   # noqa: E501

        :return: The departure_time of this Measurements.  # noqa: E501
        :rtype: int
        """
        return self._departure_time

    @departure_time.setter
    def departure_time(self, departure_time):
        """Sets the departure_time of this Measurements.

        Суммарное время на отдьезд от локаций. Для остановки - время, затраченное на отдьезд от локации.   # noqa: E501

        :param departure_time: The departure_time of this Measurements.  # noqa: E501
        :type: int
        """
        if departure_time is None:
            raise ValueError("Invalid value for `departure_time`, must not be `None`")  # noqa: E501

        self._departure_time = departure_time

    @property
    def total_time(self):
        """Gets the total_time of this Measurements.  # noqa: E501

        Суммарное время на локаицю/рейс/совокупность рейсов, в минутах.        Складывается из driving_time + waiting_time + working_time + arriving_time + departure_time.    # noqa: E501

        :return: The total_time of this Measurements.  # noqa: E501
        :rtype: int
        """
        return self._total_time

    @total_time.setter
    def total_time(self, total_time):
        """Sets the total_time of this Measurements.

        Суммарное время на локаицю/рейс/совокупность рейсов, в минутах.        Складывается из driving_time + waiting_time + working_time + arriving_time + departure_time.    # noqa: E501

        :param total_time: The total_time of this Measurements.  # noqa: E501
        :type: int
        """
        if total_time is None:
            raise ValueError("Invalid value for `total_time`, must not be `None`")  # noqa: E501

        self._total_time = total_time

    @property
    def distance(self):
        """Gets the distance of this Measurements.  # noqa: E501

        Суммарное протяжённость рейса/совокупности рейсов в метрах. Для остановки - расстояние от предыдущей остановки до текущей локации.   # noqa: E501

        :return: The distance of this Measurements.  # noqa: E501
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this Measurements.

        Суммарное протяжённость рейса/совокупности рейсов в метрах. Для остановки - расстояние от предыдущей остановки до текущей локации.   # noqa: E501

        :param distance: The distance of this Measurements.  # noqa: E501
        :type: int
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")  # noqa: E501

        self._distance = distance

    @property
    def time_window(self):
        """Gets the time_window of this Measurements.  # noqa: E501


        :return: The time_window of this Measurements.  # noqa: E501
        :rtype: TimeWindow
        """
        return self._time_window

    @time_window.setter
    def time_window(self, time_window):
        """Sets the time_window of this Measurements.


        :param time_window: The time_window of this Measurements.  # noqa: E501
        :type: TimeWindow
        """

        self._time_window = time_window

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Measurements, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Measurements):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
