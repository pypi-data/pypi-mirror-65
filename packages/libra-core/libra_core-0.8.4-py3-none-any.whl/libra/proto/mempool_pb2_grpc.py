# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import mempool_pb2 as mempool__pb2


class MempoolStub(object):
  """-----------------------------------------------------------------------------
  ---------------- Mempool Service Definition
  -----------------------------------------------------------------------------
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.AddTransactionWithValidation = channel.unary_unary(
        '/mempool.Mempool/AddTransactionWithValidation',
        request_serializer=mempool__pb2.AddTransactionWithValidationRequest.SerializeToString,
        response_deserializer=mempool__pb2.AddTransactionWithValidationResponse.FromString,
        )
    self.GetBlock = channel.unary_unary(
        '/mempool.Mempool/GetBlock',
        request_serializer=mempool__pb2.GetBlockRequest.SerializeToString,
        response_deserializer=mempool__pb2.GetBlockResponse.FromString,
        )
    self.CommitTransactions = channel.unary_unary(
        '/mempool.Mempool/CommitTransactions',
        request_serializer=mempool__pb2.CommitTransactionsRequest.SerializeToString,
        response_deserializer=mempool__pb2.CommitTransactionsResponse.FromString,
        )
    self.HealthCheck = channel.unary_unary(
        '/mempool.Mempool/HealthCheck',
        request_serializer=mempool__pb2.HealthCheckRequest.SerializeToString,
        response_deserializer=mempool__pb2.HealthCheckResponse.FromString,
        )


class MempoolServicer(object):
  """-----------------------------------------------------------------------------
  ---------------- Mempool Service Definition
  -----------------------------------------------------------------------------
  """

  def AddTransactionWithValidation(self, request, context):
    """Adds a new transaction to the mempool with validation against existing
    transactions in the mempool.  Note that this function performs additional
    validation that AC is unable to perform. (because AC knows only about a
    single transaction, but mempool potentially knows about multiple pending
    transactions)
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetBlock(self, request, context):
    """Fetch ordered block of transactions
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CommitTransactions(self, request, context):
    """Remove committed transactions from Mempool
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def HealthCheck(self, request, context):
    """Check the health of mempool
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MempoolServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'AddTransactionWithValidation': grpc.unary_unary_rpc_method_handler(
          servicer.AddTransactionWithValidation,
          request_deserializer=mempool__pb2.AddTransactionWithValidationRequest.FromString,
          response_serializer=mempool__pb2.AddTransactionWithValidationResponse.SerializeToString,
      ),
      'GetBlock': grpc.unary_unary_rpc_method_handler(
          servicer.GetBlock,
          request_deserializer=mempool__pb2.GetBlockRequest.FromString,
          response_serializer=mempool__pb2.GetBlockResponse.SerializeToString,
      ),
      'CommitTransactions': grpc.unary_unary_rpc_method_handler(
          servicer.CommitTransactions,
          request_deserializer=mempool__pb2.CommitTransactionsRequest.FromString,
          response_serializer=mempool__pb2.CommitTransactionsResponse.SerializeToString,
      ),
      'HealthCheck': grpc.unary_unary_rpc_method_handler(
          servicer.HealthCheck,
          request_deserializer=mempool__pb2.HealthCheckRequest.FromString,
          response_serializer=mempool__pb2.HealthCheckResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'mempool.Mempool', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
