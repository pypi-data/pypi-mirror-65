# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import execution_pb2 as execution__pb2


class ExecutionStub(object):
  """-----------------------------------------------------------------------------
  ---------------- Execution Service Definition
  -----------------------------------------------------------------------------
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ExecuteBlock = channel.unary_unary(
        '/execution.Execution/ExecuteBlock',
        request_serializer=execution__pb2.ExecuteBlockRequest.SerializeToString,
        response_deserializer=execution__pb2.ExecuteBlockResponse.FromString,
        )
    self.CommitBlock = channel.unary_unary(
        '/execution.Execution/CommitBlock',
        request_serializer=execution__pb2.CommitBlockRequest.SerializeToString,
        response_deserializer=execution__pb2.CommitBlockResponse.FromString,
        )
    self.ExecuteChunk = channel.unary_unary(
        '/execution.Execution/ExecuteChunk',
        request_serializer=execution__pb2.ExecuteChunkRequest.SerializeToString,
        response_deserializer=execution__pb2.ExecuteChunkResponse.FromString,
        )


class ExecutionServicer(object):
  """-----------------------------------------------------------------------------
  ---------------- Execution Service Definition
  -----------------------------------------------------------------------------
  """

  def ExecuteBlock(self, request, context):
    """Execute a list of signed transactions given by consensus. Return the id
    of the block and the root hash of the ledger after applying transactions
    in this block.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CommitBlock(self, request, context):
    """Commit a previously executed block that has been agreed by consensus.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ExecuteChunk(self, request, context):
    """Execute and commit a list of signed transactions received from peer
    during synchronization. Return the id of the block
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ExecutionServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ExecuteBlock': grpc.unary_unary_rpc_method_handler(
          servicer.ExecuteBlock,
          request_deserializer=execution__pb2.ExecuteBlockRequest.FromString,
          response_serializer=execution__pb2.ExecuteBlockResponse.SerializeToString,
      ),
      'CommitBlock': grpc.unary_unary_rpc_method_handler(
          servicer.CommitBlock,
          request_deserializer=execution__pb2.CommitBlockRequest.FromString,
          response_serializer=execution__pb2.CommitBlockResponse.SerializeToString,
      ),
      'ExecuteChunk': grpc.unary_unary_rpc_method_handler(
          servicer.ExecuteChunk,
          request_deserializer=execution__pb2.ExecuteChunkRequest.FromString,
          response_serializer=execution__pb2.ExecuteChunkResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'execution.Execution', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
