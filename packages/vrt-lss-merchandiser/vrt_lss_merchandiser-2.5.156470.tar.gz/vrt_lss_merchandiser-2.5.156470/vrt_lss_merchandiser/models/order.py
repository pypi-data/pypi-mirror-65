# coding: utf-8

"""
    VeeRoute.LSS Merchandiser

    Программный интерфейс для планирования работ торговых предствителей.  # noqa: E501

    OpenAPI spec version: 2.5.156470
    Contact: support@veeroute.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Order(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'location': 'Location',
        'visits': 'list[EventWindow]',
        'facts': 'list[EventWindow]',
        'duration': 'float',
        'reward': 'CostReward'
    }

    attribute_map = {
        'key': 'key',
        'location': 'location',
        'visits': 'visits',
        'facts': 'facts',
        'duration': 'duration',
        'reward': 'reward'
    }

    def __init__(self, key=None, location=None, visits=None, facts=None, duration=None, reward=None):  # noqa: E501
        """Order - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._location = None
        self._visits = None
        self._facts = None
        self._duration = None
        self._reward = None
        self.discriminator = None
        self.key = key
        self.location = location
        self.visits = visits
        if facts is not None:
            self.facts = facts
        self.duration = duration
        self.reward = reward

    @property
    def key(self):
        """Gets the key of this Order.  # noqa: E501

        Уникальный идентификатор  # noqa: E501

        :return: The key of this Order.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Order.

        Уникальный идентификатор  # noqa: E501

        :param key: The key of this Order.  # noqa: E501
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def location(self):
        """Gets the location of this Order.  # noqa: E501


        :return: The location of this Order.  # noqa: E501
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Order.


        :param location: The location of this Order.  # noqa: E501
        :type: Location
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def visits(self):
        """Gets the visits of this Order.  # noqa: E501

        Список временных окон, в каждое из которых необходимо выполнить посещение точки  # noqa: E501

        :return: The visits of this Order.  # noqa: E501
        :rtype: list[EventWindow]
        """
        return self._visits

    @visits.setter
    def visits(self, visits):
        """Sets the visits of this Order.

        Список временных окон, в каждое из которых необходимо выполнить посещение точки  # noqa: E501

        :param visits: The visits of this Order.  # noqa: E501
        :type: list[EventWindow]
        """
        if visits is None:
            raise ValueError("Invalid value for `visits`, must not be `None`")  # noqa: E501

        self._visits = visits

    @property
    def facts(self):
        """Gets the facts of this Order.  # noqa: E501

        Список временных окон, в каждое из которых ранее были совершены посещения точек  # noqa: E501

        :return: The facts of this Order.  # noqa: E501
        :rtype: list[EventWindow]
        """
        return self._facts

    @facts.setter
    def facts(self, facts):
        """Sets the facts of this Order.

        Список временных окон, в каждое из которых ранее были совершены посещения точек  # noqa: E501

        :param facts: The facts of this Order.  # noqa: E501
        :type: list[EventWindow]
        """

        self._facts = facts

    @property
    def duration(self):
        """Gets the duration of this Order.  # noqa: E501

        Продолжительность одного посещения в минутах  # noqa: E501

        :return: The duration of this Order.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Order.

        Продолжительность одного посещения в минутах  # noqa: E501

        :param duration: The duration of this Order.  # noqa: E501
        :type: float
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def reward(self):
        """Gets the reward of this Order.  # noqa: E501


        :return: The reward of this Order.  # noqa: E501
        :rtype: CostReward
        """
        return self._reward

    @reward.setter
    def reward(self, reward):
        """Sets the reward of this Order.


        :param reward: The reward of this Order.  # noqa: E501
        :type: CostReward
        """
        if reward is None:
            raise ValueError("Invalid value for `reward`, must not be `None`")  # noqa: E501

        self._reward = reward

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Order, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Order):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
