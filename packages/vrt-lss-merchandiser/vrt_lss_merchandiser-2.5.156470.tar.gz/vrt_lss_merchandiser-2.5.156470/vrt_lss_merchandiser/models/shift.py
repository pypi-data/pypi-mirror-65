# coding: utf-8

"""
    VeeRoute.LSS Merchandiser

    Программный интерфейс для планирования работ торговых предствителей.  # noqa: E501

    OpenAPI spec version: 2.5.156470
    Contact: support@veeroute.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Shift(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'availability_time': 'TimeWindow',
        'working_time': 'TimeWindow',
        'trip': 'Trip'
    }

    attribute_map = {
        'availability_time': 'availability_time',
        'working_time': 'working_time',
        'trip': 'trip'
    }

    def __init__(self, availability_time=None, working_time=None, trip=None):  # noqa: E501
        """Shift - a model defined in Swagger"""  # noqa: E501
        self._availability_time = None
        self._working_time = None
        self._trip = None
        self.discriminator = None
        self.availability_time = availability_time
        self.working_time = working_time
        if trip is not None:
            self.trip = trip

    @property
    def availability_time(self):
        """Gets the availability_time of this Shift.  # noqa: E501


        :return: The availability_time of this Shift.  # noqa: E501
        :rtype: TimeWindow
        """
        return self._availability_time

    @availability_time.setter
    def availability_time(self, availability_time):
        """Sets the availability_time of this Shift.


        :param availability_time: The availability_time of this Shift.  # noqa: E501
        :type: TimeWindow
        """
        if availability_time is None:
            raise ValueError("Invalid value for `availability_time`, must not be `None`")  # noqa: E501

        self._availability_time = availability_time

    @property
    def working_time(self):
        """Gets the working_time of this Shift.  # noqa: E501


        :return: The working_time of this Shift.  # noqa: E501
        :rtype: TimeWindow
        """
        return self._working_time

    @working_time.setter
    def working_time(self, working_time):
        """Sets the working_time of this Shift.


        :param working_time: The working_time of this Shift.  # noqa: E501
        :type: TimeWindow
        """
        if working_time is None:
            raise ValueError("Invalid value for `working_time`, must not be `None`")  # noqa: E501

        self._working_time = working_time

    @property
    def trip(self):
        """Gets the trip of this Shift.  # noqa: E501


        :return: The trip of this Shift.  # noqa: E501
        :rtype: Trip
        """
        return self._trip

    @trip.setter
    def trip(self, trip):
        """Sets the trip of this Shift.


        :param trip: The trip of this Shift.  # noqa: E501
        :type: Trip
        """

        self._trip = trip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Shift, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Shift):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
