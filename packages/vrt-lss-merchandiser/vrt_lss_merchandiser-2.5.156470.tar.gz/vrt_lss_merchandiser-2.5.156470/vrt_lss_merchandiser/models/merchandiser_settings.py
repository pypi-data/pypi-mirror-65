# coding: utf-8

"""
    VeeRoute.LSS Merchandiser

    Программный интерфейс для планирования работ торговых предствителей.  # noqa: E501

    OpenAPI spec version: 2.5.156470
    Contact: support@veeroute.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class MerchandiserSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accuracy': 'str'
    }

    attribute_map = {
        'accuracy': 'accuracy'
    }

    def __init__(self, accuracy='DAY'):  # noqa: E501
        """MerchandiserSettings - a model defined in Swagger"""  # noqa: E501
        self._accuracy = None
        self.discriminator = None
        if accuracy is not None:
            self.accuracy = accuracy

    @property
    def accuracy(self):
        """Gets the accuracy of this MerchandiserSettings.  # noqa: E501

        Точность учета переодичности посещений:   * `EXACT` - Каждое следующее посещение выполняется в тот же самый день недели   * `DAY` - Допускается отклонение в один день   * `CUSTOM_1` - Точность учета посещений 1   * `CUSTOM_2` - Точность учета посещений 2   * `CUSTOM_3` - Точность учета посещений 3   # noqa: E501

        :return: The accuracy of this MerchandiserSettings.  # noqa: E501
        :rtype: str
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this MerchandiserSettings.

        Точность учета переодичности посещений:   * `EXACT` - Каждое следующее посещение выполняется в тот же самый день недели   * `DAY` - Допускается отклонение в один день   * `CUSTOM_1` - Точность учета посещений 1   * `CUSTOM_2` - Точность учета посещений 2   * `CUSTOM_3` - Точность учета посещений 3   # noqa: E501

        :param accuracy: The accuracy of this MerchandiserSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["EXACT", "DAY", "CUSTOM_1", "CUSTOM_2", "CUSTOM_3"]  # noqa: E501
        if accuracy not in allowed_values:
            raise ValueError(
                "Invalid value for `accuracy` ({0}), must be one of {1}"  # noqa: E501
                .format(accuracy, allowed_values)
            )

        self._accuracy = accuracy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MerchandiserSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MerchandiserSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
