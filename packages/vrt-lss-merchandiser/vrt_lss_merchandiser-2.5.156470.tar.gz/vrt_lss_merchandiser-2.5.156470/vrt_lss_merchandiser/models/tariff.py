# coding: utf-8

"""
    VeeRoute.LSS Merchandiser

    Программный интерфейс для планирования работ торговых предствителей.  # noqa: E501

    OpenAPI spec version: 2.5.156470
    Contact: support@veeroute.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Tariff(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'basic': 'TariffPrimary',
        'extra': 'list[TariffPrimary]'
    }

    attribute_map = {
        'basic': 'basic',
        'extra': 'extra'
    }

    def __init__(self, basic=None, extra=None):  # noqa: E501
        """Tariff - a model defined in Swagger"""  # noqa: E501
        self._basic = None
        self._extra = None
        self.discriminator = None
        self.basic = basic
        if extra is not None:
            self.extra = extra

    @property
    def basic(self):
        """Gets the basic of this Tariff.  # noqa: E501


        :return: The basic of this Tariff.  # noqa: E501
        :rtype: TariffPrimary
        """
        return self._basic

    @basic.setter
    def basic(self, basic):
        """Sets the basic of this Tariff.


        :param basic: The basic of this Tariff.  # noqa: E501
        :type: TariffPrimary
        """
        if basic is None:
            raise ValueError("Invalid value for `basic`, must not be `None`")  # noqa: E501

        self._basic = basic

    @property
    def extra(self):
        """Gets the extra of this Tariff.  # noqa: E501

        Дополнительная тарификация, используемая для сверхурочной работы.  Может быть представлена в виде нескольких этапов: для каждого этапа переработки может указываться свой тариф оплаты.  Каждый этап определяется протяжённостью и пробегом от предыдущего (первый от базового тарифа).   # noqa: E501

        :return: The extra of this Tariff.  # noqa: E501
        :rtype: list[TariffPrimary]
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this Tariff.

        Дополнительная тарификация, используемая для сверхурочной работы.  Может быть представлена в виде нескольких этапов: для каждого этапа переработки может указываться свой тариф оплаты.  Каждый этап определяется протяжённостью и пробегом от предыдущего (первый от базового тарифа).   # noqa: E501

        :param extra: The extra of this Tariff.  # noqa: E501
        :type: list[TariffPrimary]
        """

        self._extra = extra

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tariff, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tariff):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
