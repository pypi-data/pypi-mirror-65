### Configure file for the ACC package in json format
# Comments are indicated with "#" and ignored while parsing
# It is strongly suggested to read the self-commented configuration file.
{

# type of data used to image structures
# You can select "event" to use teleseismic events or global events using the corresponding phases.
# Only Z-component data would be processed for imaging.
# Correspondingly, the phase would be "P" no matter what you set phase to.
"acc_type": "event", # "event" supported only
"phase": "P", # "P" supported only

# number of CPU cores to processing data, if null then use all available CPUs.
"njobs": 12,

### switches of processing
"rm_resp_on": false, # switch of instrumental response removal. I strongly you remove RESP externally.
"whiten_on": true, # switch of spectral whitening
"time_norm_on": false, # switch of temporal normalization

"tt_model": "ak135", # model for travel time calculation
"pp_model": "ak135", # model for pirece point calculation
"depth_unit": "m", # "km", "m" of focal depth. Now automatically selected in the code.

### input/output options ###
"io": {

        # Data can be
        #      a wildcard expression of files. All files are read at once. If you have
        #      a huge dataset, think about splitting data into several small pieces.
        "data": "RAW_DATA/*/*.sac",
        # whether force to overwrite if files already existed. true: overwrite, false: skip
        "force": true,

        # roopath for results and figures
        "outpath": "acc"
},


### options of data selection ###
# selection criteria for "event" data
"data_selection_event": {
        ### options for event_type of "event"
        "dist_range": [30, 90], # distace range in degree
        "magnitude": [5.0, 7.0], # select all data, use a wide range, e.g., [-10, 100]
        "snr_threshold": 2.0, # signal-to-noise ration, event greater than 'snr_threshold' will be chosen.
        "signal": [-10, 10], # time window of signal in sec relative to the theoretical arrival time
        "noise": [-40, -20], # time window of noise in sec relative to the theoretical arrival time
        "waterlevel": 1.0e-8 # used for SNR calculation to avoid zero division
},


### options of pre-processing
"preprocessing": {
        # including basic single station processings: downsampling, instrumental response removal, detrend, demean
        "sampling_rate": 20, # sampling rate in Hz, 10 Hz mean 0.1 s in sampling interval

        ### options for spectral whitening
        "whiten":{
                "smooth": 0.5, # smoothing window width, if null then do not smooth.
                "filter": [0.01, 1.0], # frequency band, if null then do not filter.
                "corners": 4, # filter parameter
                "zerophase": true, # filter parameter
                "waterlevel": 1e-8 # waterlevel for safe division
        },

        ### options for temporal normalization, please see Bensen (2007, GJI).
        "time_norm":{
                "method": "run_abs_mean", # supporting "1bit", "run_abs_mean"
                "time_length": 5, # smoothing window width in sec
                "filter": [0.01, 0.5], #frequency band in Hz
                "corners": 2, # filter parameter
                "zerophase": true, # filter parameter
                "waterlevel": 1.0e-8 # waterlevel for safe division
        }
},


### options for auto and cross correlation
"correlate":{
        ### options for event_type of "event"
        "window": [-10, 110], # in sec relative to the theoretical arrival time
        "filter": [0.1, 0.5], # frequency band
        "corners": 4, # filter parameter
        "zerophase": true # filter parameter
},


### options for stacking, not used for this example.
"stack": {
        "method": "linear", # "linear", "PWS", "bootstrap_linear", 'bootstrap_PWS'
        "power": 2, # power of PWS, 0 means linear stacking
        # options for bootstrap stacking
        "percentage": 0.9, # percentage of all data used for bootstrap stacking
        "seed": 123456789, # random seed
        "n_iter": 100 # number of iterations
},


### options for migration and profile settings
"migration": {
        "model": null # if null, then use the tt_model
},

"profile": {
        # the start point and the end point to define a profile, (latitude, longitude)
        "latlon0": [-19.96, 134.35], # if null, then use the station coordinate. useful for one station
        "latlon1": [-19.77, 134.39], # the end point.
        "binsize": 5, # bin size in km
        "binwidth": 200, # bin width in km
        "profile_id": "WB", # profile id shown on the top right corner.
        "wild_card": "WB" # the wildcard is used to extract those expected stations to stack. "*" to select all stations
},

### plotting
"plot": {
        "figsize": [20, 3], # figure size of width and height in inches
        "width_ratios": [1, 9], # width_ratios of the waveform and image
        "depth_range": [0, 200],
        "dist_range": [150, 350], # if null, use the range of bins.
        "image_scale": 4,
        "wavef_scale": 2
}

}
