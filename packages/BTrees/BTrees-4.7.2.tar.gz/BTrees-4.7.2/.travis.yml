language: python

env:
  global:
    TWINE_USERNAME: zope.wheelbuilder
    TWINE_PASSWORD:
      secure: "GoACBHy175St7lL5BIfW6Jz4HLG7XWpyt8znNJPe1HwInjSOWRqc0EZGVAjpCfOGX3iE3HchDH00WydkPuYEgUo0eoH59vVKk+x+LccKmUPQBSBW4HN40UVgQhtMm3BFsdk+dq0taxw2ZNGmv0+uo9uLqVXkcNNpokmOyoXkDmc="

python:
  - 2.7
  - 3.5
  - 3.6
  - 3.7
  - 3.8
  - pypy
  - pypy3

jobs:
  include:
    - name: Documentation
      python: 3.8
      install:
        - pip install -U -e .[docs]
      script:
        - sphinx-build -b html -d docs/_build/doctrees docs docs/_build/html
        - sphinx-build -b doctest -d docs/_build/doctrees docs docs/_build/doctest
      after_success:

    # Special Linux builds
    - name: "Python: 2.7, pure (no C extensions)"
      python: 2.7
      env: PURE_PYTHON=1
    - name: "Python: 3.8, pure (no C extensions), with coverage, strict IRO"
      python: 3.8
      env: PURE_PYTHON=1 WITH_COVERAGE=1 ZOPE_INTERFACE_STRICT_IRO=1
    - name: "Python: 3.8, with coverage, strict IRO"
      python: 3.8
      env: WITH_COVERAGE=1 ZOPE_INTERFACE_STRICT_IRO=1

    # manylinux wheel builds
    - name: 64-bit manylinux wheels (all Pythons)
      services: docker
      env: DOCKER_IMAGE=quay.io/pypa/manylinux2010_x86_64
      install: docker pull $DOCKER_IMAGE
      script: bash .manylinux.sh

    - name: 32-bit manylinux wheels (all Pythons)
      services: docker
      env: DOCKER_IMAGE=quay.io/pypa/manylinux2010_i686 PRE_CMD=linux32
      install: docker pull $DOCKER_IMAGE
      script: bash .manylinux.sh

    # It's important to use 'macpython' builds to get the least
    # restrictive wheel tag. It's also important to avoid
    # 'homebrew 3' because it floats instead of being a specific version.
    - name: Python 2.7 wheels for MacOS
      os: osx
      language: generic
      # We require at least 2.7.15 to upload wheels.
      # See https://github.com/zopefoundation/BTrees/issues/113
      env: TERRYFY_PYTHON='macpython 2.7.17'
    - name: Python 3.5 wheels for MacOS
      os: osx
      language: generic
      env: TERRYFY_PYTHON='macpython 3.5'
    - name: Python 3.6 wheels for MacOS
      os: osx
      language: generic
      env: TERRYFY_PYTHON='macpython 3.6.1'
    - name: Python 3.7 wheels for MacOS
      os: osx
      language: generic
      env: TERRYFY_PYTHON='macpython 3.7.0'
    - name: Python 3.8 wheels for MacOS
      os: osx
      language: generic
      env: TERRYFY_PYTHON='macpython 3.8.0'

before_install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      git clone https://github.com/MacPython/terryfy
      source terryfy/travis_tools.sh
      get_python_environment $TERRYFY_PYTHON venv
    fi

install:
  - python -m pip install -U pip setuptools
  - if [[ "$WITH_COVERAGE" == "1" ]]; then python -m pip install coveralls coverage; fi
  - python -m pip install -U -e .[test,ZODB]

script:
  - python --version
# Temporary use of unittest over zope.testrunner; see tox.ini.
# (WITH_COVERAGE implies STRICT_IRO)
  - |
    if [[ "$WITH_COVERAGE" == "1" ]]; then
      python -m coverage run -m unittest discover -s .
    else
      python -m zope.testrunner --test-path=. --auto-color --auto-progress --verbose
    fi
  - python setup.py -q bdist_wheel

after_success:
  - if [[ "$WITH_COVERAGE" == "1" ]]; then python -m coveralls; fi
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      # macpython 3.5 doesn't support recent TLS protocols which causes twine
      # upload to fail, so we use the system Python to run twine
      /usr/bin/python -m ensurepip --user
      /usr/bin/python -m pip install --user -U pip
      /usr/bin/python -m pip install --user -U -I twine
      /usr/bin/python -m twine check dist/*
      if [[ $TRAVIS_TAG ]]; then
        /usr/bin/python -m twine upload --skip-existing dist/*
      fi
    fi
  - |
    if [[ -n "$DOCKER_IMAGE" ]]; then
      pip install twine
      twine check wheelhouse/*
      if [[ $TRAVIS_TAG ]]; then
        twine upload --skip-existing wheelhouse/*
      fi
    fi

notifications:
  email: false

cache: pip
