# Generated by Django 3.0.4 on 2020-03-27 09:13

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('BTC', 'Bitcoin')], max_length=100, unique=True)),
                ('min_confirmations', models.IntegerField(help_text='Minimum confirmations number after which a transaction will get the status "is confirmed"')),
            ],
            options={
                'verbose_name_plural': 'currencies',
            },
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('bitcoin-core', 'bitcoin-core')], max_length=200, unique=True)),
                ('is_default', models.BooleanField(default=True, help_text='If True the node will be used as default for transaction sending')),
                ('rpc_username', models.CharField(help_text='Username for JSON-RPC connections', max_length=200, verbose_name='RPC username')),
                ('rpc_password', models.CharField(help_text='Password for JSON-RPC connections', max_length=200, verbose_name='RPC password')),
                ('rpc_host', models.URLField(help_text='Listen for JSON-RPC connections on this IP address', verbose_name='RPC host')),
                ('rpc_port', models.PositiveIntegerField(help_text='Listen for JSON-RPC connections on this port', verbose_name='RPC port')),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nodes', related_query_name='node', to='blockchain.Currency')),
            ],
            options={
                'unique_together': {('rpc_host', 'rpc_port')},
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(max_length=500)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addrs', related_query_name='addr', to='blockchain.Currency')),
            ],
            options={
                'unique_together': {('address', 'currency')},
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('txid', models.CharField(max_length=500, null=True, verbose_name='transaction id')),
                ('category', models.CharField(max_length=30)),
                ('amount', models.DecimalField(decimal_places=10, help_text='The transaction amount in currency', max_digits=19)),
                ('fee', models.DecimalField(decimal_places=10, help_text='The amount of the fee in currency. This is negative and only available for the "send" category of transactions.', max_digits=19, null=True)),
                ('is_confirmed', models.BooleanField(default=False, verbose_name='confirmed')),
                ('timestamp', models.PositiveIntegerField(help_text='transaction creation timestamp', null=True, verbose_name='time')),
                ('timestamp_received', models.PositiveIntegerField(help_text='transaction receipt time in timestamp', null=True, verbose_name='receipt time')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='txs', related_query_name='tx', to='blockchain.Address')),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='txs', related_query_name='tx', to='blockchain.Node')),
            ],
            options={
                'unique_together': {('node', 'txid')},
            },
        ),
    ]
