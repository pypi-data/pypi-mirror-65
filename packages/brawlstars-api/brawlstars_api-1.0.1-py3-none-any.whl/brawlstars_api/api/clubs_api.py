# coding: utf-8

"""
    Brawl Stars API

    Brawl Stars API  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ClubsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_club(self, club_tag, **kwargs):  # noqa: E501
        """Get club information.  # noqa: E501

        Get information about a single clan by club tag. Club tags can be found in game. Note that clan tags start with hash character '#' and that needs to be URL-encoded properly to work in URL, so for example clan tag '#2ABC' would become '%232ABC' in the URL.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_club(club_tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str club_tag: Tag of the club. (required)
        :return: Club
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_club_with_http_info(club_tag, **kwargs)  # noqa: E501
        else:
            (data) = self.get_club_with_http_info(club_tag, **kwargs)  # noqa: E501
            return data

    def get_club_with_http_info(self, club_tag, **kwargs):  # noqa: E501
        """Get club information.  # noqa: E501

        Get information about a single clan by club tag. Club tags can be found in game. Note that clan tags start with hash character '#' and that needs to be URL-encoded properly to work in URL, so for example clan tag '#2ABC' would become '%232ABC' in the URL.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_club_with_http_info(club_tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str club_tag: Tag of the club. (required)
        :return: Club
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['club_tag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_club" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'club_tag' is set
        if ('club_tag' not in params or
                params['club_tag'] is None):
            raise ValueError("Missing the required parameter `club_tag` when calling `get_club`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_tag' in params:
            path_params['clubTag'] = params['club_tag']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/clubs/{clubTag}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Club',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_club_members(self, club_tag, **kwargs):  # noqa: E501
        """List club members.  # noqa: E501

        List club members.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_club_members(club_tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str club_tag: Tag of the club. (required)
        :param str before: Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :param str after: Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :param int limit: Limit the number of items returned in the response.
        :return: ClubMemberList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_club_members_with_http_info(club_tag, **kwargs)  # noqa: E501
        else:
            (data) = self.get_club_members_with_http_info(club_tag, **kwargs)  # noqa: E501
            return data

    def get_club_members_with_http_info(self, club_tag, **kwargs):  # noqa: E501
        """List club members.  # noqa: E501

        List club members.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_club_members_with_http_info(club_tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str club_tag: Tag of the club. (required)
        :param str before: Return only items that occur before this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :param str after: Return only items that occur after this marker. Before marker can be found from the response, inside the 'paging' property. Note that only after or before can be specified for a request, not both. 
        :param int limit: Limit the number of items returned in the response.
        :return: ClubMemberList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['club_tag', 'before', 'after', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_club_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'club_tag' is set
        if ('club_tag' not in params or
                params['club_tag'] is None):
            raise ValueError("Missing the required parameter `club_tag` when calling `get_club_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'club_tag' in params:
            path_params['clubTag'] = params['club_tag']  # noqa: E501

        query_params = []
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWT']  # noqa: E501

        return self.api_client.call_api(
            '/clubs/{clubTag}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClubMemberList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
