# coding: utf-8

"""
    Brawl Stars API

    Brawl Stars API  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PlayerRanking(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'club': 'PlayerRankingClub',
        'tag': 'str',
        'name': 'str',
        'trophies': 'int',
        'rank': 'int',
        'name_color': 'str'
    }

    attribute_map = {
        'club': 'club',
        'tag': 'tag',
        'name': 'name',
        'trophies': 'trophies',
        'rank': 'rank',
        'name_color': 'nameColor'
    }

    def __init__(self, club=None, tag=None, name=None, trophies=None, rank=None, name_color=None):  # noqa: E501
        """PlayerRanking - a model defined in Swagger"""  # noqa: E501
        self._club = None
        self._tag = None
        self._name = None
        self._trophies = None
        self._rank = None
        self._name_color = None
        self.discriminator = None
        if club is not None:
            self.club = club
        if tag is not None:
            self.tag = tag
        if name is not None:
            self.name = name
        if trophies is not None:
            self.trophies = trophies
        if rank is not None:
            self.rank = rank
        if name_color is not None:
            self.name_color = name_color

    @property
    def club(self):
        """Gets the club of this PlayerRanking.  # noqa: E501


        :return: The club of this PlayerRanking.  # noqa: E501
        :rtype: PlayerRankingClub
        """
        return self._club

    @club.setter
    def club(self, club):
        """Sets the club of this PlayerRanking.


        :param club: The club of this PlayerRanking.  # noqa: E501
        :type: PlayerRankingClub
        """

        self._club = club

    @property
    def tag(self):
        """Gets the tag of this PlayerRanking.  # noqa: E501


        :return: The tag of this PlayerRanking.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this PlayerRanking.


        :param tag: The tag of this PlayerRanking.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def name(self):
        """Gets the name of this PlayerRanking.  # noqa: E501


        :return: The name of this PlayerRanking.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlayerRanking.


        :param name: The name of this PlayerRanking.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def trophies(self):
        """Gets the trophies of this PlayerRanking.  # noqa: E501


        :return: The trophies of this PlayerRanking.  # noqa: E501
        :rtype: int
        """
        return self._trophies

    @trophies.setter
    def trophies(self, trophies):
        """Sets the trophies of this PlayerRanking.


        :param trophies: The trophies of this PlayerRanking.  # noqa: E501
        :type: int
        """

        self._trophies = trophies

    @property
    def rank(self):
        """Gets the rank of this PlayerRanking.  # noqa: E501


        :return: The rank of this PlayerRanking.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this PlayerRanking.


        :param rank: The rank of this PlayerRanking.  # noqa: E501
        :type: int
        """

        self._rank = rank

    @property
    def name_color(self):
        """Gets the name_color of this PlayerRanking.  # noqa: E501


        :return: The name_color of this PlayerRanking.  # noqa: E501
        :rtype: str
        """
        return self._name_color

    @name_color.setter
    def name_color(self, name_color):
        """Sets the name_color of this PlayerRanking.


        :param name_color: The name_color of this PlayerRanking.  # noqa: E501
        :type: str
        """

        self._name_color = name_color

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlayerRanking, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlayerRanking):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
