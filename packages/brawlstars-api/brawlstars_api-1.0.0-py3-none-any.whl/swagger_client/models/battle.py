# coding: utf-8

"""
    Brawl Stars API

    Brawl Stars API  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Battle(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'battle': 'BattleResult',
        'battle_time': 'str',
        'event': 'Event'
    }

    attribute_map = {
        'battle': 'battle',
        'battle_time': 'battleTime',
        'event': 'event'
    }

    def __init__(self, battle=None, battle_time=None, event=None):  # noqa: E501
        """Battle - a model defined in Swagger"""  # noqa: E501
        self._battle = None
        self._battle_time = None
        self._event = None
        self.discriminator = None
        if battle is not None:
            self.battle = battle
        if battle_time is not None:
            self.battle_time = battle_time
        if event is not None:
            self.event = event

    @property
    def battle(self):
        """Gets the battle of this Battle.  # noqa: E501


        :return: The battle of this Battle.  # noqa: E501
        :rtype: BattleResult
        """
        return self._battle

    @battle.setter
    def battle(self, battle):
        """Sets the battle of this Battle.


        :param battle: The battle of this Battle.  # noqa: E501
        :type: BattleResult
        """

        self._battle = battle

    @property
    def battle_time(self):
        """Gets the battle_time of this Battle.  # noqa: E501


        :return: The battle_time of this Battle.  # noqa: E501
        :rtype: str
        """
        return self._battle_time

    @battle_time.setter
    def battle_time(self, battle_time):
        """Sets the battle_time of this Battle.


        :param battle_time: The battle_time of this Battle.  # noqa: E501
        :type: str
        """

        self._battle_time = battle_time

    @property
    def event(self):
        """Gets the event of this Battle.  # noqa: E501


        :return: The event of this Battle.  # noqa: E501
        :rtype: Event
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this Battle.


        :param event: The event of this Battle.  # noqa: E501
        :type: Event
        """

        self._event = event

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Battle, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Battle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
