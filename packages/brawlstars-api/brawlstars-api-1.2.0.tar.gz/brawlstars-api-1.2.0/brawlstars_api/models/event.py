# coding: utf-8

"""
    Brawl Stars API

    Brawl Stars API  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mode': 'str',
        'id': 'int',
        'map': 'JsonLocalizedName'
    }

    attribute_map = {
        'mode': 'mode',
        'id': 'id',
        'map': 'map'
    }

    def __init__(self, mode=None, id=None, map=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501
        self._mode = None
        self._id = None
        self._map = None
        self.discriminator = None
        if mode is not None:
            self.mode = mode
        if id is not None:
            self.id = id
        if map is not None:
            self.map = map

    @property
    def mode(self):
        """Gets the mode of this Event.  # noqa: E501


        :return: The mode of this Event.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Event.


        :param mode: The mode of this Event.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def id(self):
        """Gets the id of this Event.  # noqa: E501


        :return: The id of this Event.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.


        :param id: The id of this Event.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def map(self):
        """Gets the map of this Event.  # noqa: E501


        :return: The map of this Event.  # noqa: E501
        :rtype: JsonLocalizedName
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this Event.


        :param map: The map of this Event.  # noqa: E501
        :type: JsonLocalizedName
        """

        self._map = map

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Event, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
