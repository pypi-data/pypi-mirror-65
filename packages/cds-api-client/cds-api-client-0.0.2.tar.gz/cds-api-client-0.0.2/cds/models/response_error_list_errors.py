# BSD 3-Clause "New" or "Revised" License (BSD-3-Clause) 
# Copyright (c) 2020 Stephen McCalman. All rights reserved.

"""
A Python client package for accessing data from an API that follows the Consumer Data Standards (CDS).
CDS repo: https://consumerdatastandardsaustralia.github.io/standards

Generated with the Swagger-Codegen CLI from a Swagger specification file of the Consumer Data Standards.
Do not edit this file manually. CLI repo: https://github.com/swagger-api/swagger-codegen
    
The package is NOT part of the official Consumer Data Standards' project nor any API implementation of the Standards.
Package repo: https://github.com/stephenmccalman/cds-python-api-client
"""


import pprint
import re  # noqa: F401

class ResponseErrorListErrors(object):
    """ResponseErrorListErrors class."""
    


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'title': 'str',
        'detail': 'str',
        'meta': 'object'
    }

    attribute_map = {
        'code': 'code',
        'title': 'title',
        'detail': 'detail',
        'meta': 'meta'
    }

    def __init__(self, code=None, title=None, detail=None, meta=None):  # noqa: E501
        """ResponseErrorListErrors"""  # noqa: E501

        self._code = None
        self._title = None
        self._detail = None
        self._meta = None
        self.discriminator = None

        self.code = code
        self.title = title
        self.detail = detail
        if meta is not None:
            self.meta = meta

    @property
    def code(self):
        """Gets the code of this ResponseErrorListErrors.  # noqa: E501

        Must be one of the following: 0001 – Account not able to be found  # noqa: E501

        :return: The code of this ResponseErrorListErrors.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ResponseErrorListErrors.

        Must be one of the following: 0001 – Account not able to be found  # noqa: E501

        :param code: The code of this ResponseErrorListErrors.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def title(self):
        """Gets the title of this ResponseErrorListErrors.  # noqa: E501

        Must be one of the following: Invalid account  # noqa: E501

        :return: The title of this ResponseErrorListErrors.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ResponseErrorListErrors.

        Must be one of the following: Invalid account  # noqa: E501

        :param title: The title of this ResponseErrorListErrors.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def detail(self):
        """Gets the detail of this ResponseErrorListErrors.  # noqa: E501

        ID of the account not found  # noqa: E501

        :return: The detail of this ResponseErrorListErrors.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this ResponseErrorListErrors.

        ID of the account not found  # noqa: E501

        :param detail: The detail of this ResponseErrorListErrors.  # noqa: E501
        :type: str
        """
        if detail is None:
            raise ValueError("Invalid value for `detail`, must not be `None`")  # noqa: E501

        self._detail = detail

    @property
    def meta(self):
        """Gets the meta of this ResponseErrorListErrors.  # noqa: E501

        Optional additional data for specific error types  # noqa: E501

        :return: The meta of this ResponseErrorListErrors.  # noqa: E501
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this ResponseErrorListErrors.

        Optional additional data for specific error types  # noqa: E501

        :param meta: The meta of this ResponseErrorListErrors.  # noqa: E501
        :type: object
        """

        self._meta = meta

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResponseErrorListErrors, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseErrorListErrors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
