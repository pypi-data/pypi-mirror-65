# BSD 3-Clause "New" or "Revised" License (BSD-3-Clause) 
# Copyright (c) 2020 Stephen McCalman. All rights reserved.

"""
A Python client package for accessing data from an API that follows the Consumer Data Standards (CDS).
CDS repo: https://consumerdatastandardsaustralia.github.io/standards

Generated with the Swagger-Codegen CLI from a Swagger specification file of the Consumer Data Standards.
Do not edit this file manually. CLI repo: https://github.com/swagger-api/swagger-codegen
    
The package is NOT part of the official Consumer Data Standards' project nor any API implementation of the Standards.
Package repo: https://github.com/stephenmccalman/cds-python-api-client
"""


import pprint
import re  # noqa: F401

class CommonPhysicalAddress(object):
    """CommonPhysicalAddress class."""
    


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_u_type': 'str',
        'simple': 'CommonSimpleAddress',
        'paf': 'CommonPAFAddress'
    }

    attribute_map = {
        'address_u_type': 'addressUType',
        'simple': 'simple',
        'paf': 'paf'
    }

    def __init__(self, address_u_type=None, simple=None, paf=None):  # noqa: E501
        """CommonPhysicalAddress"""  # noqa: E501

        self._address_u_type = None
        self._simple = None
        self._paf = None
        self.discriminator = None

        self.address_u_type = address_u_type
        if simple is not None:
            self.simple = simple
        if paf is not None:
            self.paf = paf

    @property
    def address_u_type(self):
        """Gets the address_u_type of this CommonPhysicalAddress.  # noqa: E501

        The type of address object present  # noqa: E501

        :return: The address_u_type of this CommonPhysicalAddress.  # noqa: E501
        :rtype: str
        """
        return self._address_u_type

    @address_u_type.setter
    def address_u_type(self, address_u_type):
        """Sets the address_u_type of this CommonPhysicalAddress.

        The type of address object present  # noqa: E501

        :param address_u_type: The address_u_type of this CommonPhysicalAddress.  # noqa: E501
        :type: str
        """
        if address_u_type is None:
            raise ValueError("Invalid value for `address_u_type`, must not be `None`")  # noqa: E501
        allowed_values = ["simple", "paf"]  # noqa: E501
        if address_u_type not in allowed_values:
            raise ValueError(
                "Invalid value for `address_u_type` ({0}), must be one of {1}"  # noqa: E501
                .format(address_u_type, allowed_values)
            )

        self._address_u_type = address_u_type

    @property
    def simple(self):
        """Gets the simple of this CommonPhysicalAddress.  # noqa: E501


        :return: The simple of this CommonPhysicalAddress.  # noqa: E501
        :rtype: CommonSimpleAddress
        """
        return self._simple

    @simple.setter
    def simple(self, simple):
        """Sets the simple of this CommonPhysicalAddress.


        :param simple: The simple of this CommonPhysicalAddress.  # noqa: E501
        :type: CommonSimpleAddress
        """

        self._simple = simple

    @property
    def paf(self):
        """Gets the paf of this CommonPhysicalAddress.  # noqa: E501


        :return: The paf of this CommonPhysicalAddress.  # noqa: E501
        :rtype: CommonPAFAddress
        """
        return self._paf

    @paf.setter
    def paf(self, paf):
        """Sets the paf of this CommonPhysicalAddress.


        :param paf: The paf of this CommonPhysicalAddress.  # noqa: E501
        :type: CommonPAFAddress
        """

        self._paf = paf

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonPhysicalAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonPhysicalAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
