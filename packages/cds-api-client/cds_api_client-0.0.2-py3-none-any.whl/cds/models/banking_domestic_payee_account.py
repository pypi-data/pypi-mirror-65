# BSD 3-Clause "New" or "Revised" License (BSD-3-Clause) 
# Copyright (c) 2020 Stephen McCalman. All rights reserved.

"""
A Python client package for accessing data from an API that follows the Consumer Data Standards (CDS).
CDS repo: https://consumerdatastandardsaustralia.github.io/standards

Generated with the Swagger-Codegen CLI from a Swagger specification file of the Consumer Data Standards.
Do not edit this file manually. CLI repo: https://github.com/swagger-api/swagger-codegen
    
The package is NOT part of the official Consumer Data Standards' project nor any API implementation of the Standards.
Package repo: https://github.com/stephenmccalman/cds-python-api-client
"""


import pprint
import re  # noqa: F401

class BankingDomesticPayeeAccount(object):
    """BankingDomesticPayeeAccount class."""
    


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_name': 'str',
        'bsb': 'str',
        'account_number': 'str'
    }

    attribute_map = {
        'account_name': 'accountName',
        'bsb': 'bsb',
        'account_number': 'accountNumber'
    }

    def __init__(self, account_name=None, bsb=None, account_number=None):  # noqa: E501
        """BankingDomesticPayeeAccount"""  # noqa: E501

        self._account_name = None
        self._bsb = None
        self._account_number = None
        self.discriminator = None

        if account_name is not None:
            self.account_name = account_name
        self.bsb = bsb
        self.account_number = account_number

    @property
    def account_name(self):
        """Gets the account_name of this BankingDomesticPayeeAccount.  # noqa: E501

        Name of the account to pay to  # noqa: E501

        :return: The account_name of this BankingDomesticPayeeAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this BankingDomesticPayeeAccount.

        Name of the account to pay to  # noqa: E501

        :param account_name: The account_name of this BankingDomesticPayeeAccount.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def bsb(self):
        """Gets the bsb of this BankingDomesticPayeeAccount.  # noqa: E501

        BSB of the account to pay to  # noqa: E501

        :return: The bsb of this BankingDomesticPayeeAccount.  # noqa: E501
        :rtype: str
        """
        return self._bsb

    @bsb.setter
    def bsb(self, bsb):
        """Sets the bsb of this BankingDomesticPayeeAccount.

        BSB of the account to pay to  # noqa: E501

        :param bsb: The bsb of this BankingDomesticPayeeAccount.  # noqa: E501
        :type: str
        """
        if bsb is None:
            raise ValueError("Invalid value for `bsb`, must not be `None`")  # noqa: E501

        self._bsb = bsb

    @property
    def account_number(self):
        """Gets the account_number of this BankingDomesticPayeeAccount.  # noqa: E501

        Number of the account to pay to  # noqa: E501

        :return: The account_number of this BankingDomesticPayeeAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this BankingDomesticPayeeAccount.

        Number of the account to pay to  # noqa: E501

        :param account_number: The account_number of this BankingDomesticPayeeAccount.  # noqa: E501
        :type: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")  # noqa: E501

        self._account_number = account_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankingDomesticPayeeAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankingDomesticPayeeAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
