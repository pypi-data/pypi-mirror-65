'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.onStart = onStart;
exports.onHandleConfig = onHandleConfig;
exports.onHandleTag = onHandleTag;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var option = undefined;
var packagePath = './package.json';

/**
 * take option
 * @param {Object} ev - handle event.
 */

function onStart(ev) {
  option = ev.data.option;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = option.replaces[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var item = _step.value;

      item.from = new RegExp(item.from);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

/**
 * take config for package.json path.
 * @param {Object} ev - handle event.
 */

function onHandleConfig(ev) {
  if (ev.data.config['package']) packagePath = ev.data.config['package'];
}

/**
 * replace import path with using option.replaces.
 * @param {Object} ev - handle event.
 */

function onHandleTag(ev) {
  // get package.json
  var packageName = '';
  var mainPath = '';
  try {
    var packageJSON = _fs2['default'].readFileSync(packagePath).toString();
    var packageObj = JSON.parse(packageJSON);
    packageName = packageObj.name;
    if (packageObj.main) mainPath = packageObj.main;
  } catch (e) {
    // ignore
  }

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = ev.data.tag[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var tag = _step2.value;

      if (!tag.importPath) continue;

      var importPath = tag.importPath;
      if (packageName) importPath = importPath.replace(new RegExp('^' + packageName + '/'), '');

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = option.replaces[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var item = _step3.value;

          importPath = importPath.replace(item.from, item.to);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3['return']) {
            _iterator3['return']();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      if (importPath === mainPath) {
        tag.importPath = packageName;
      } else if (packageName) {
        tag.importPath = packageName + '/' + importPath;
      } else {
        tag.importPath = importPath;
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2['return']) {
        _iterator2['return']();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }
}