{"version":3,"sources":["webpack:///./node_modules/@polymer/iron-a11y-announcer/iron-a11y-announcer.js","webpack:///./node_modules/@polymer/iron-input/iron-input.js","webpack:///./src/data/input_text.ts","webpack:///./src/components/ha-slider.js","webpack:///./node_modules/@polymer/iron-form-element-behavior/iron-form-element-behavior.js","webpack:///./node_modules/@polymer/iron-validatable-behavior/iron-validatable-behavior.js","webpack:///./node_modules/@polymer/paper-input/paper-input.js","webpack:///./src/panels/lovelace/entity-rows/hui-input-number-entity-row.ts"],"names":["__webpack_require__","d","__webpack_exports__","IronA11yAnnouncer","_polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_1__","_polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_2__","Polymer","_template","html","is","properties","mode","type","String","value","_text","created","instance","this","document","body","addEventListener","_onIronAnnounce","bind","announce","text","async","event","detail","requestAvailability","createElement","appendChild","_polymer_iron_a11y_announcer_iron_a11y_announcer_js__WEBPACK_IMPORTED_MODULE_1__","_polymer_iron_validatable_behavior_iron_validatable_behavior_js__WEBPACK_IMPORTED_MODULE_2__","_polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_3__","_polymer_polymer_lib_legacy_polymer_dom_js__WEBPACK_IMPORTED_MODULE_4__","_polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_5__","behaviors","IronValidatableBehavior","bindValue","computed","allowedPattern","autoValidate","Boolean","_inputElement","Object","observers","listeners","input","keypress","_previousValidInput","_patternAlreadyChecked","attached","_observer","dom","observeNodes","info","_initSlottedInput","detached","unobserveNodes","inputElement","getEffectiveChildren","fire","_patternRegExp","pattern","RegExp","_bindValueChanged","undefined","validate","_onInput","_checkPatternValidity","_announceInvalidCharacter","_isPrintable","anyNonPrintable","keyCode","mozNonPrintable","charCode","_onKeypress","regexp","metaKey","ctrlKey","altKey","thisChar","fromCharCode","test","preventDefault","i","length","invalid","valid","checkValidity","required","hasValidator","call","message","_computeValue","setValue","fetchInputText","createInputText","updateInputText","deleteInputText","hass","entity","callService","split","entity_id","callWS","values","assign","id","updates","input_text_id","PaperSliderClass","customElements","get","subTemplate","define","template","cloneNode","content","querySelector","createTextNode","_calcStep","step","parseFloat","numSteps","Math","round","min","stepStr","toString","stepPointAt","indexOf","precision","IronFormElementBehavior","name","notify","_polymer_iron_meta_iron_meta_js__WEBPACK_IMPORTED_MODULE_1__","IronValidatableBehaviorMeta","validator","reflectToAttribute","observer","registered","IronMeta","_invalidChanged","setAttribute","removeAttribute","_validator","byKey","_getValidity","_polymer_iron_form_element_behavior_iron_form_element_behavior_js__WEBPACK_IMPORTED_MODULE_5__","_polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_7__","_polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_8__","_paper_input_behavior_js__WEBPACK_IMPORTED_MODULE_9__","PaperInputBehavior","_focusableElement","iron-input-ready","_onIronInputReady","$","nativeInput","$$","_typesThatHaveText","alwaysFloatLabel","container","_handleValueAndAutoValidate","customElement","HuiInputNumberEntityRow","_LitElement","[object Object]","args","super","_initialize","property","config","Error","_config","_get","_getPrototypeOf","prototype","_updated","_loaded","_initialLoad","isConnected","changedProps","hasConfigOrEntityChanged","stateObj","states","attributes","computeRTLDirection","Number","max","state","_selectedValueChanged","unit_of_measurement","localize","css","updateComplete","element","shadowRoot","parentElement","hidden","clientWidth","getElementById","LitElement"],"mappings":"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","file":"chunk.2e2a7cdb0004676d716a.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`iron-a11y-announcer` is a singleton element that is intended to add a11y\nto features that require on-demand announcement from screen readers. In\norder to make use of the announcer, it is best to request its availability\nin the announcing element.\n\nExample:\n\n    Polymer({\n\n      is: 'x-chatty',\n\n      attached: function() {\n        // This will create the singleton element if it has not\n        // been created yet:\n        Polymer.IronA11yAnnouncer.requestAvailability();\n      }\n    });\n\nAfter the `iron-a11y-announcer` has been made available, elements can\nmake announces by firing bubbling `iron-announce` events.\n\nExample:\n\n    this.fire('iron-announce', {\n      text: 'This is an announcement!'\n    }, { bubbles: true });\n\nNote: announcements are only audible if you have a screen reader enabled.\n\n@group Iron Elements\n@demo demo/index.html\n*/\nexport const IronA11yAnnouncer = Polymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        position: fixed;\n        clip: rect(0px,0px,0px,0px);\n      }\n    </style>\n    <div aria-live$=\"[[mode]]\">[[_text]]</div>\n`,\n\n  is: 'iron-a11y-announcer',\n\n  properties: {\n\n    /**\n     * The value of mode is used to set the `aria-live` attribute\n     * for the element that will be announced. Valid values are: `off`,\n     * `polite` and `assertive`.\n     */\n    mode: {type: String, value: 'polite'},\n\n    _text: {type: String, value: ''}\n  },\n\n  created: function() {\n    if (!IronA11yAnnouncer.instance) {\n      IronA11yAnnouncer.instance = this;\n    }\n\n    document.body.addEventListener(\n        'iron-announce', this._onIronAnnounce.bind(this));\n  },\n\n  /**\n   * Cause a text string to be announced by screen readers.\n   *\n   * @param {string} text The text that should be announced.\n   */\n  announce: function(text) {\n    this._text = '';\n    this.async(function() {\n      this._text = text;\n    }, 100);\n  },\n\n  _onIronAnnounce: function(event) {\n    if (event.detail && event.detail.text) {\n      this.announce(event.detail.text);\n    }\n  }\n});\n\nIronA11yAnnouncer.instance = null;\n\nIronA11yAnnouncer.requestAvailability = function() {\n  if (!IronA11yAnnouncer.instance) {\n    IronA11yAnnouncer.instance = document.createElement('iron-a11y-announcer');\n  }\n\n  document.body.appendChild(IronA11yAnnouncer.instance);\n};\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronA11yAnnouncer} from '@polymer/iron-a11y-announcer/iron-a11y-announcer.js';\nimport {IronValidatableBehavior} from '@polymer/iron-validatable-behavior/iron-validatable-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`<iron-input>` is a wrapper to a native `<input>` element, that adds two-way\nbinding and prevention of invalid input. To use it, you must distribute a native\n`<input>` yourself. You can continue to use the native `input` as you would\nnormally:\n\n    <iron-input>\n      <input>\n    </iron-input>\n\n    <iron-input>\n      <input type=\"email\" disabled>\n    </iron-input>\n\n### Two-way binding\n\nBy default you can only get notified of changes to a native `<input>`'s `value`\ndue to user input:\n\n    <input value=\"{{myValue::input}}\">\n\nThis means that if you imperatively set the value (i.e. `someNativeInput.value =\n'foo'`), no events will be fired and this change cannot be observed.\n\n`iron-input` adds the `bind-value` property that mirrors the native `input`'s\n'`value` property; this property can be used for two-way data binding.\n`bind-value` will notify if it is changed either by user input or by script.\n\n    <iron-input bind-value=\"{{myValue}}\">\n      <input>\n    </iron-input>\n\nNote: this means that if you want to imperatively set the native `input`'s, you\n_must_ set `bind-value` instead, so that the wrapper `iron-input` can be\nnotified.\n\n### Validation\n\n`iron-input` uses the native `input`'s validation. For simplicity, `iron-input`\nhas a `validate()` method (which internally just checks the distributed\n`input`'s validity), which sets an `invalid` attribute that can also be used for\nstyling.\n\nTo validate automatically as you type, you can use the `auto-validate`\nattribute.\n\n`iron-input` also fires an `iron-input-validate` event after `validate()` is\ncalled. You can use it to implement a custom validator:\n\n    var CatsOnlyValidator = {\n      validate: function(ironInput) {\n        var valid = !ironInput.bindValue || ironInput.bindValue === 'cat';\n        ironInput.invalid = !valid;\n        return valid;\n      }\n    }\n    ironInput.addEventListener('iron-input-validate', function() {\n      CatsOnly.validate(input2);\n    });\n\nYou can also use an element implementing an\n[`IronValidatorBehavior`](/element/PolymerElements/iron-validatable-behavior).\nThis example can also be found in the demo for this element:\n\n    <iron-input validator=\"cats-only\">\n      <input>\n    </iron-input>\n\n### Preventing invalid input\n\nIt may be desirable to only allow users to enter certain characters. You can use\nthe `allowed-pattern` attribute to accomplish this. This feature is separate\nfrom validation, and `allowed-pattern` does not affect how the input is\nvalidated.\n\n    // Only allow typing digits, but a valid input has exactly 5 digits.\n    <iron-input allowed-pattern=\"[0-9]\">\n      <input pattern=\"\\d{5}\">\n    </iron-input>\n\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n      }\n    </style>\n    <slot id=\"content\"></slot>\n`,\n\n  is: 'iron-input',\n  behaviors: [IronValidatableBehavior],\n\n  /**\n   * Fired whenever `validate()` is called.\n   *\n   * @event iron-input-validate\n   */\n\n  properties: {\n\n    /**\n     * Use this property instead of `value` for two-way data binding, or to\n     * set a default value for the input. **Do not** use the distributed\n     * input's `value` property to set a default value.\n     */\n    bindValue: {type: String, value: ''},\n\n    /**\n     * Computed property that echoes `bindValue` (mostly used for Polymer 1.0\n     * backcompatibility, if you were one-way binding to the Polymer 1.0\n     * `input is=\"iron-input\"` value attribute).\n     */\n    value: {type: String, computed: '_computeValue(bindValue)'},\n\n    /**\n     * Regex-like list of characters allowed as input; all characters not in the\n     * list will be rejected. The recommended format should be a list of allowed\n     * characters, for example, `[a-zA-Z0-9.+-!;:]`.\n     *\n     * This pattern represents the allowed characters for the field; as the user\n     * inputs text, each individual character will be checked against the\n     * pattern (rather than checking the entire value as a whole). If a\n     * character is not a match, it will be rejected.\n     *\n     * Pasted input will have each character checked individually; if any\n     * character doesn't match `allowedPattern`, the entire pasted string will\n     * be rejected.\n     *\n     * Note: if you were using `iron-input` in 1.0, you were also required to\n     * set `prevent-invalid-input`. This is no longer needed as of Polymer 2.0,\n     * and will be set automatically for you if an `allowedPattern` is provided.\n     *\n     */\n    allowedPattern: {type: String},\n\n    /**\n     * Set to true to auto-validate the input value as you type.\n     */\n    autoValidate: {type: Boolean, value: false},\n\n    /**\n     * The native input element.\n     */\n    _inputElement: Object,\n  },\n\n  observers: ['_bindValueChanged(bindValue, _inputElement)'],\n  listeners: {'input': '_onInput', 'keypress': '_onKeypress'},\n\n  created: function() {\n    IronA11yAnnouncer.requestAvailability();\n    this._previousValidInput = '';\n    this._patternAlreadyChecked = false;\n  },\n\n  attached: function() {\n    // If the input is added at a later time, update the internal reference.\n    this._observer = dom(this).observeNodes(function(info) {\n      this._initSlottedInput();\n    }.bind(this));\n  },\n\n  detached: function() {\n    if (this._observer) {\n      dom(this).unobserveNodes(this._observer);\n      this._observer = null;\n    }\n  },\n\n  /**\n   * Returns the distributed input element.\n   */\n  get inputElement() {\n    return this._inputElement;\n  },\n\n  _initSlottedInput: function() {\n    this._inputElement = this.getEffectiveChildren()[0];\n\n    if (this.inputElement && this.inputElement.value) {\n      this.bindValue = this.inputElement.value;\n    }\n\n    this.fire('iron-input-ready');\n  },\n\n  get _patternRegExp() {\n    var pattern;\n    if (this.allowedPattern) {\n      pattern = new RegExp(this.allowedPattern);\n    } else {\n      switch (this.inputElement.type) {\n        case 'number':\n          pattern = /[0-9.,e-]/;\n          break;\n      }\n    }\n    return pattern;\n  },\n\n  /**\n   * @suppress {checkTypes}\n   */\n  _bindValueChanged: function(bindValue, inputElement) {\n    // The observer could have run before attached() when we have actually\n    // initialized this property.\n    if (!inputElement) {\n      return;\n    }\n\n    if (bindValue === undefined) {\n      inputElement.value = null;\n    } else if (bindValue !== inputElement.value) {\n      this.inputElement.value = bindValue;\n    }\n\n    if (this.autoValidate) {\n      this.validate();\n    }\n\n    // manually notify because we don't want to notify until after setting value\n    this.fire('bind-value-changed', {value: bindValue});\n  },\n\n  _onInput: function() {\n    // Need to validate each of the characters pasted if they haven't\n    // been validated inside `_onKeypress` already.\n    if (this.allowedPattern && !this._patternAlreadyChecked) {\n      var valid = this._checkPatternValidity();\n      if (!valid) {\n        this._announceInvalidCharacter(\n            'Invalid string of characters not entered.');\n        this.inputElement.value = this._previousValidInput;\n      }\n    }\n    this.bindValue = this._previousValidInput = this.inputElement.value;\n    this._patternAlreadyChecked = false;\n  },\n\n  _isPrintable: function(event) {\n    // What a control/printable character is varies wildly based on the browser.\n    // - most control characters (arrows, backspace) do not send a `keypress`\n    // event\n    //   in Chrome, but the *do* on Firefox\n    // - in Firefox, when they do send a `keypress` event, control chars have\n    //   a charCode = 0, keyCode = xx (for ex. 40 for down arrow)\n    // - printable characters always send a keypress event.\n    // - in Firefox, printable chars always have a keyCode = 0. In Chrome, the\n    // keyCode\n    //   always matches the charCode.\n    // None of this makes any sense.\n\n    // For these keys, ASCII code == browser keycode.\n    var anyNonPrintable = (event.keyCode == 8) ||  // backspace\n        (event.keyCode == 9) ||                    // tab\n        (event.keyCode == 13) ||                   // enter\n        (event.keyCode == 27);                     // escape\n\n    // For these keys, make sure it's a browser keycode and not an ASCII code.\n    var mozNonPrintable = (event.keyCode == 19) ||  // pause\n        (event.keyCode == 20) ||                    // caps lock\n        (event.keyCode == 45) ||                    // insert\n        (event.keyCode == 46) ||                    // delete\n        (event.keyCode == 144) ||                   // num lock\n        (event.keyCode == 145) ||                   // scroll lock\n        (event.keyCode > 32 &&\n         event.keyCode < 41) ||  // page up/down, end, home, arrows\n        (event.keyCode > 111 && event.keyCode < 124);  // fn keys\n\n    return !anyNonPrintable && !(event.charCode == 0 && mozNonPrintable);\n  },\n\n  _onKeypress: function(event) {\n    if (!this.allowedPattern && this.inputElement.type !== 'number') {\n      return;\n    }\n    var regexp = this._patternRegExp;\n    if (!regexp) {\n      return;\n    }\n\n    // Handle special keys and backspace\n    if (event.metaKey || event.ctrlKey || event.altKey) {\n      return;\n    }\n\n    // Check the pattern either here or in `_onInput`, but not in both.\n    this._patternAlreadyChecked = true;\n\n    var thisChar = String.fromCharCode(event.charCode);\n    if (this._isPrintable(event) && !regexp.test(thisChar)) {\n      event.preventDefault();\n      this._announceInvalidCharacter(\n          'Invalid character ' + thisChar + ' not entered.');\n    }\n  },\n\n  _checkPatternValidity: function() {\n    var regexp = this._patternRegExp;\n    if (!regexp) {\n      return true;\n    }\n    for (var i = 0; i < this.inputElement.value.length; i++) {\n      if (!regexp.test(this.inputElement.value[i])) {\n        return false;\n      }\n    }\n    return true;\n  },\n\n  /**\n   * Returns true if `value` is valid. The validator provided in `validator`\n   * will be used first, then any constraints.\n   * @return {boolean} True if the value is valid.\n   */\n  validate: function() {\n    if (!this.inputElement) {\n      this.invalid = false;\n      return true;\n    }\n\n    // Use the nested input's native validity.\n    var valid = this.inputElement.checkValidity();\n\n    // Only do extra checking if the browser thought this was valid.\n    if (valid) {\n      // Empty, required input is invalid\n      if (this.required && this.bindValue === '') {\n        valid = false;\n      } else if (this.hasValidator()) {\n        valid = IronValidatableBehavior.validate.call(this, this.bindValue);\n      }\n    }\n\n    this.invalid = !valid;\n    this.fire('iron-input-validate');\n    return valid;\n  },\n\n  _announceInvalidCharacter: function(message) {\n    this.fire('iron-announce', {text: message});\n  },\n\n  _computeValue: function(bindValue) {\n    return bindValue;\n  }\n});\n","import { HomeAssistant } from \"../types\";\n\nexport interface InputText {\n  id: string;\n  name: string;\n  icon?: string;\n  initial?: string;\n  min?: number;\n  max?: number;\n  pattern?: string;\n  mode?: \"text\" | \"password\";\n}\n\nexport interface InputTextMutableParams {\n  name: string;\n  icon: string;\n  initial: string;\n  min: number;\n  max: number;\n  pattern: string;\n  mode: \"text\" | \"password\";\n}\n\nexport const setValue = (hass: HomeAssistant, entity: string, value: string) =>\n  hass.callService(entity.split(\".\", 1)[0], \"set_value\", {\n    value,\n    entity_id: entity,\n  });\n\nexport const fetchInputText = (hass: HomeAssistant) =>\n  hass.callWS<InputText[]>({ type: \"input_text/list\" });\n\nexport const createInputText = (\n  hass: HomeAssistant,\n  values: InputTextMutableParams\n) =>\n  hass.callWS<InputText>({\n    type: \"input_text/create\",\n    ...values,\n  });\n\nexport const updateInputText = (\n  hass: HomeAssistant,\n  id: string,\n  updates: Partial<InputTextMutableParams>\n) =>\n  hass.callWS<InputText>({\n    type: \"input_text/update\",\n    input_text_id: id,\n    ...updates,\n  });\n\nexport const deleteInputText = (hass: HomeAssistant, id: string) =>\n  hass.callWS({\n    type: \"input_text/delete\",\n    input_text_id: id,\n  });\n","import \"@polymer/paper-slider\";\n\nconst PaperSliderClass = customElements.get(\"paper-slider\");\nlet subTemplate;\n\nclass HaSlider extends PaperSliderClass {\n  static get template() {\n    if (!subTemplate) {\n      subTemplate = PaperSliderClass.template.cloneNode(true);\n\n      const superStyle = subTemplate.content.querySelector(\"style\");\n\n      // append style to add mirroring of pin in RTL\n      superStyle.appendChild(\n        document.createTextNode(`\n          :host([dir=\"rtl\"]) #sliderContainer.pin.expand > .slider-knob > .slider-knob-inner::after {\n            -webkit-transform: scale(1) translate(0, -17px) scaleX(-1) !important;\n            transform: scale(1) translate(0, -17px) scaleX(-1) !important;\n            }\n        `)\n      );\n    }\n    return subTemplate;\n  }\n\n  _calcStep(value) {\n    if (!this.step) {\n      return parseFloat(value);\n    }\n\n    const numSteps = Math.round((value - this.min) / this.step);\n    const stepStr = this.step.toString();\n    const stepPointAt = stepStr.indexOf(\".\");\n    if (stepPointAt !== -1) {\n      /**\n       * For small values of this.step, if we calculate the step using\n       * For non-integer values of this.step, if we calculate the step using\n       * `Math.round(value / step) * step` we may hit a precision point issue\n       * eg. 0.1 * 0.2 =  0.020000000000000004\n       * http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html\n       *\n       * as a work around we can round with the decimal precision of `step`\n       */\n      const precision = 10 ** (stepStr.length - stepPointAt - 1);\n      return (\n        Math.round((numSteps * this.step + this.min) * precision) / precision\n      );\n    }\n\n    return numSteps * this.step + this.min;\n  }\n}\ncustomElements.define(\"ha-slider\", HaSlider);\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\n/**\n  IronFormElementBehavior adds a `name`, `value` and `required` properties to\n  a custom element. It mostly exists for backcompatibility with Polymer 1.x, and\n  is probably not something you want to use.\n\n  @demo demo/index.html\n  @polymerBehavior\n */\nexport const IronFormElementBehavior = {\n\n  properties: {\n    /**\n     * The name of this element.\n     */\n    name: {type: String},\n\n    /**\n     * The value for this element.\n     * @type {*}\n     */\n    value: {notify: true, type: String},\n\n    /**\n     * Set to true to mark the input as required. If used in a form, a\n     * custom element that uses this behavior should also use\n     * IronValidatableBehavior and define a custom validation method.\n     * Otherwise, a `required` element will always be considered valid.\n     * It's also strongly recommended to provide a visual style for the element\n     * when its value is invalid.\n     */\n    required: {type: Boolean, value: false},\n  },\n\n  // Empty implementations for backcompatibility.\n  attached: function() {},\n  detached: function() {}\n};\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronMeta} from '@polymer/iron-meta/iron-meta.js';\n\n/**\n * Singleton IronMeta instance.\n */\nexport let IronValidatableBehaviorMeta = null;\n\n/**\n * `Use IronValidatableBehavior` to implement an element that validates\n * user input. Use the related `IronValidatorBehavior` to add custom\n * validation logic to an iron-input.\n *\n * By default, an `<iron-form>` element validates its fields when the user\n * presses the submit button. To validate a form imperatively, call the form's\n * `validate()` method, which in turn will call `validate()` on all its\n * children. By using `IronValidatableBehavior`, your custom element\n * will get a public `validate()`, which will return the validity of the\n * element, and a corresponding `invalid` attribute, which can be used for\n * styling.\n *\n * To implement the custom validation logic of your element, you must override\n * the protected `_getValidity()` method of this behaviour, rather than\n * `validate()`. See\n * [this](https://github.com/PolymerElements/iron-form/blob/master/demo/simple-element.html)\n * for an example.\n *\n * ### Accessibility\n *\n * Changing the `invalid` property, either manually or by calling `validate()`\n * will update the `aria-invalid` attribute.\n *\n * @demo demo/index.html\n * @polymerBehavior\n */\nexport const IronValidatableBehavior = {\n\n  properties: {\n    /**\n     * Name of the validator to use.\n     */\n    validator: {type: String},\n\n    /**\n     * True if the last call to `validate` is invalid.\n     */\n    invalid: {\n      notify: true,\n      reflectToAttribute: true,\n      type: Boolean,\n      value: false,\n      observer: '_invalidChanged'\n    },\n  },\n\n  registered: function() {\n    IronValidatableBehaviorMeta = new IronMeta({type: 'validator'});\n  },\n\n  _invalidChanged: function() {\n    if (this.invalid) {\n      this.setAttribute('aria-invalid', 'true');\n    } else {\n      this.removeAttribute('aria-invalid');\n    }\n  },\n\n  /* Recompute this every time it's needed, because we don't know if the\n   * underlying IronValidatableBehaviorMeta has changed. */\n  get _validator() {\n    return IronValidatableBehaviorMeta &&\n        IronValidatableBehaviorMeta.byKey(this.validator);\n  },\n\n  /**\n   * @return {boolean} True if the validator `validator` exists.\n   */\n  hasValidator: function() {\n    return this._validator != null;\n  },\n\n  /**\n   * Returns true if the `value` is valid, and updates `invalid`. If you want\n   * your element to have custom validation logic, do not override this method;\n   * override `_getValidity(value)` instead.\n\n   * @param {Object} value Deprecated: The value to be validated. By default,\n   * it is passed to the validator's `validate()` function, if a validator is\n   set.\n   * If this argument is not specified, then the element's `value` property\n   * is used, if it exists.\n   * @return {boolean} True if `value` is valid.\n   */\n  validate: function(value) {\n    // If this is an element that also has a value property, and there was\n    // no explicit value argument passed, use the element's property instead.\n    if (value === undefined && this.value !== undefined)\n      this.invalid = !this._getValidity(this.value);\n    else\n      this.invalid = !this._getValidity(value);\n    return !this.invalid;\n  },\n\n  /**\n   * Returns true if `value` is valid.  By default, it is passed\n   * to the validator's `validate()` function, if a validator is set. You\n   * should override this method if you want to implement custom validity\n   * logic for your element.\n   *\n   * @param {Object} value The value to be validated.\n   * @return {boolean} True if `value` is valid.\n   */\n\n  _getValidity: function(value) {\n    if (this.hasValidator()) {\n      return this._validator.validate(value);\n    }\n    return true;\n  }\n};\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-input/iron-input.js';\nimport './paper-input-char-counter.js';\nimport './paper-input-container.js';\nimport './paper-input-error.js';\n\nimport {IronFormElementBehavior} from '@polymer/iron-form-element-behavior/iron-form-element-behavior.js';\nimport {DomModule} from '@polymer/polymer/lib/elements/dom-module.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {PaperInputBehavior} from './paper-input-behavior.js';\n\n/**\nMaterial design: [Text\nfields](https://www.google.com/design/spec/components/text-fields.html)\n\n`<paper-input>` is a single-line text field with Material Design styling.\n\n    <paper-input label=\"Input label\"></paper-input>\n\nIt may include an optional error message or character counter.\n\n    <paper-input error-message=\"Invalid input!\" label=\"Input\n    label\"></paper-input> <paper-input char-counter label=\"Input\n    label\"></paper-input>\n\nIt can also include custom prefix or suffix elements, which are displayed\nbefore or after the text input itself. In order for an element to be\nconsidered as a prefix, it must have the `prefix` attribute (and similarly\nfor `suffix`).\n\n    <paper-input label=\"total\">\n      <div prefix>$</div>\n      <paper-icon-button slot=\"suffix\" icon=\"clear\"></paper-icon-button>\n    </paper-input>\n\nA `paper-input` can use the native `type=search` or `type=file` features.\nHowever, since we can't control the native styling of the input (search icon,\nfile button, date placeholder, etc.), in these cases the label will be\nautomatically floated. The `placeholder` attribute can still be used for\nadditional informational text.\n\n    <paper-input label=\"search!\" type=\"search\"\n        placeholder=\"search for cats\" autosave=\"test\" results=\"5\">\n    </paper-input>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Focus\n\nTo focus a paper-input, you can call the native `focus()` method as long as the\npaper input has a tab index. Similarly, `blur()` will blur the element.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-container-ms-clear` | Mixin applied to the Internet Explorer reveal button (the eyeball) | {}\n\n@group Paper Elements\n@element paper-input\n@hero hero.svg\n@demo demo/index.html\n*/\nPolymer({\n  is: 'paper-input',\n\n  _template: html`\n    <style>\n      :host {\n        display: block;\n      }\n\n      :host([focused]) {\n        outline: none;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      input {\n        /* Firefox sets a min-width on the input, which can cause layout issues */\n        min-width: 0;\n      }\n\n      /* In 1.x, the <input> is distributed to paper-input-container, which styles it.\n      In 2.x the <iron-input> is distributed to paper-input-container, which styles\n      it, but in order for this to work correctly, we need to reset some\n      of the native input's properties to inherit (from the iron-input) */\n      iron-input > input {\n        @apply --paper-input-container-shared-input-style;\n        font-family: inherit;\n        font-weight: inherit;\n        font-size: inherit;\n        letter-spacing: inherit;\n        word-spacing: inherit;\n        line-height: inherit;\n        text-shadow: inherit;\n        color: inherit;\n        cursor: inherit;\n      }\n\n      input:disabled {\n        @apply --paper-input-container-input-disabled;\n      }\n\n      input::-webkit-outer-spin-button,\n      input::-webkit-inner-spin-button {\n        @apply --paper-input-container-input-webkit-spinner;\n      }\n\n      input::-webkit-clear-button {\n        @apply --paper-input-container-input-webkit-clear;\n      }\n\n      input::-webkit-calendar-picker-indicator {\n        @apply --paper-input-container-input-webkit-calendar-picker-indicator;\n      }\n\n      input::-webkit-input-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input:-moz-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input::-moz-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input::-ms-clear {\n        @apply --paper-input-container-ms-clear;\n      }\n\n      input::-ms-reveal {\n        @apply --paper-input-container-ms-reveal;\n      }\n\n      input:-ms-input-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      label {\n        pointer-events: none;\n      }\n    </style>\n\n    <paper-input-container id=\"container\" no-label-float=\"[[noLabelFloat]]\" always-float-label=\"[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]\" auto-validate$=\"[[autoValidate]]\" disabled$=\"[[disabled]]\" invalid=\"[[invalid]]\">\n\n      <slot name=\"prefix\" slot=\"prefix\"></slot>\n\n      <label hidden$=\"[[!label]]\" aria-hidden=\"true\" for$=\"[[_inputId]]\" slot=\"label\">[[label]]</label>\n\n      <!-- Need to bind maxlength so that the paper-input-char-counter works correctly -->\n      <iron-input bind-value=\"{{value}}\" slot=\"input\" class=\"input-element\" id$=\"[[_inputId]]\" maxlength$=\"[[maxlength]]\" allowed-pattern=\"[[allowedPattern]]\" invalid=\"{{invalid}}\" validator=\"[[validator]]\">\n        <input aria-labelledby$=\"[[_ariaLabelledBy]]\" aria-describedby$=\"[[_ariaDescribedBy]]\" disabled$=\"[[disabled]]\" title$=\"[[title]]\" type$=\"[[type]]\" pattern$=\"[[pattern]]\" required$=\"[[required]]\" autocomplete$=\"[[autocomplete]]\" autofocus$=\"[[autofocus]]\" inputmode$=\"[[inputmode]]\" minlength$=\"[[minlength]]\" maxlength$=\"[[maxlength]]\" min$=\"[[min]]\" max$=\"[[max]]\" step$=\"[[step]]\" name$=\"[[name]]\" placeholder$=\"[[placeholder]]\" readonly$=\"[[readonly]]\" list$=\"[[list]]\" size$=\"[[size]]\" autocapitalize$=\"[[autocapitalize]]\" autocorrect$=\"[[autocorrect]]\" on-change=\"_onChange\" tabindex$=\"[[tabIndex]]\" autosave$=\"[[autosave]]\" results$=\"[[results]]\" accept$=\"[[accept]]\" multiple$=\"[[multiple]]\">\n      </iron-input>\n\n      <slot name=\"suffix\" slot=\"suffix\"></slot>\n\n      <template is=\"dom-if\" if=\"[[errorMessage]]\">\n        <paper-input-error aria-live=\"assertive\" slot=\"add-on\">[[errorMessage]]</paper-input-error>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[charCounter]]\">\n        <paper-input-char-counter slot=\"add-on\"></paper-input-char-counter>\n      </template>\n\n    </paper-input-container>\n  `,\n\n  behaviors: [PaperInputBehavior, IronFormElementBehavior],\n\n  properties: {\n    value: {\n      // Required for the correct TypeScript type-generation\n      type: String\n    }\n  },\n\n  /**\n   * Returns a reference to the focusable element. Overridden from\n   * PaperInputBehavior to correctly focus the native input.\n   *\n   * @return {!HTMLElement}\n   */\n  get _focusableElement() {\n    return this.inputElement._inputElement;\n  },\n\n  // Note: This event is only available in the 1.0 version of this element.\n  // In 2.0, the functionality of `_onIronInputReady` is done in\n  // PaperInputBehavior::attached.\n  listeners: {'iron-input-ready': '_onIronInputReady'},\n\n  _onIronInputReady: function() {\n    // Even though this is only used in the next line, save this for\n    // backwards compatibility, since the native input had this ID until 2.0.5.\n    if (!this.$.nativeInput) {\n      this.$.nativeInput = this.$$('input');\n    }\n    if (this.inputElement &&\n        this._typesThatHaveText.indexOf(this.$.nativeInput.type) !== -1) {\n      this.alwaysFloatLabel = true;\n    }\n\n    // Only validate when attached if the input already has a value.\n    if (!!this.inputElement.bindValue) {\n      this.$.container._handleValueAndAutoValidate(this.inputElement);\n    }\n  },\n});\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  property,\n  customElement,\n  css,\n  CSSResult,\n  PropertyValues,\n} from \"lit-element\";\n\nimport \"../components/hui-generic-entity-row\";\nimport \"../../../components/ha-slider\";\nimport \"../components/hui-warning\";\n\nimport { computeRTLDirection } from \"../../../common/util/compute_rtl\";\nimport { LovelaceRow, EntityConfig } from \"./types\";\nimport { HomeAssistant } from \"../../../types\";\nimport { setValue } from \"../../../data/input_text\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\n\n@customElement(\"hui-input-number-entity-row\")\nclass HuiInputNumberEntityRow extends LitElement implements LovelaceRow {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: EntityConfig;\n\n  private _loaded?: boolean;\n\n  private _updated?: boolean;\n\n  public setConfig(config: EntityConfig): void {\n    if (!config) {\n      throw new Error(\"Configuration error\");\n    }\n    this._config = config;\n  }\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    if (this._updated && !this._loaded) {\n      this._initialLoad();\n    }\n  }\n\n  protected firstUpdated(): void {\n    this._updated = true;\n    if (this.isConnected && !this._loaded) {\n      this._initialLoad();\n    }\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning\n          >${this.hass.localize(\n            \"ui.panel.lovelace.warning.entity_not_found\",\n            \"entity\",\n            this._config.entity\n          )}</hui-warning\n        >\n      `;\n    }\n\n    return html`\n      <hui-generic-entity-row .hass=${this.hass} .config=${this._config}>\n        ${stateObj.attributes.mode === \"slider\"\n          ? html`\n              <div class=\"flex\">\n                <ha-slider\n                  .dir=\"${computeRTLDirection(this.hass!)}\"\n                  .step=\"${Number(stateObj.attributes.step)}\"\n                  .min=\"${Number(stateObj.attributes.min)}\"\n                  .max=\"${Number(stateObj.attributes.max)}\"\n                  .value=\"${Number(stateObj.state)}\"\n                  pin\n                  @change=\"${this._selectedValueChanged}\"\n                  ignore-bar-touch\n                  id=\"input\"\n                ></ha-slider>\n                <span class=\"state\">\n                  ${Number(stateObj.state)}\n                  ${stateObj.attributes.unit_of_measurement}\n                </span>\n              </div>\n            `\n          : html`\n              <paper-input\n                no-label-float\n                auto-validate\n                .pattern=\"[0-9]+([\\\\.][0-9]+)?\"\n                .step=\"${Number(stateObj.attributes.step)}\"\n                .min=\"${Number(stateObj.attributes.min)}\"\n                .max=\"${Number(stateObj.attributes.max)}\"\n                .value=\"${Number(stateObj.state)}\"\n                type=\"number\"\n                @change=\"${this._selectedValueChanged}\"\n                id=\"input\"\n              ></paper-input>\n            `}\n      </hui-generic-entity-row>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .flex {\n        display: flex;\n        align-items: center;\n        justify-content: flex-end;\n        width: 100%;\n      }\n      .state {\n        min-width: 45px;\n        text-align: end;\n      }\n      paper-input {\n        text-align: end;\n      }\n      ha-slider {\n        width: 100%;\n        max-width: 200px;\n      }\n    `;\n  }\n\n  private async _initialLoad(): Promise<void> {\n    this._loaded = true;\n    await this.updateComplete;\n    const element = this.shadowRoot!.querySelector(\".state\") as HTMLElement;\n\n    if (!element || !this.parentElement) {\n      return;\n    }\n\n    element.hidden = this.parentElement.clientWidth <= 350;\n  }\n\n  private get _inputElement(): { value: string } {\n    // linter recommended the following syntax\n    return (this.shadowRoot!.getElementById(\"input\") as unknown) as {\n      value: string;\n    };\n  }\n\n  private _selectedValueChanged(): void {\n    const element = this._inputElement;\n    const stateObj = this.hass!.states[this._config!.entity];\n\n    if (element.value !== stateObj.state) {\n      setValue(this.hass!, stateObj.entity_id, element.value!);\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-input-number-entity-row\": HuiInputNumberEntityRow;\n  }\n}\n"],"sourceRoot":""}