{"version":3,"sources":["webpack:///node_modules/moment/locale/tlh.js"],"names":["moment","numbersNouns","split","translate","number","withoutSuffix","string","isFuture","numberNoun","hundred","Math","floor","ten","one","word","numberAsNoun","defineLocale","months","monthsShort","monthsParseExact","weekdays","weekdaysShort","weekdaysMin","longDateFormat","LT","LTS","L","LL","LLL","LLLL","calendar","sameDay","nextDay","nextWeek","lastDay","lastWeek","sameElse","relativeTime","future","output","time","indexOf","slice","past","s","ss","m","mm","h","hh","d","dd","M","MM","y","yy","dayOfMonthOrdinalParse","ordinal","week","dow","doy","factory","__webpack_require__"],"mappings":"0EAOC,SAAAA,GAA2B,aAG5B,IAAAC,EAAA,iDAAAC,MAAA,KA0BA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAiBA,SAAAJ,GACA,IAAAK,EAAAC,KAAAC,MAAAP,EAAA,SACAQ,EAAAF,KAAAC,MAAAP,EAAA,QACAS,EAAAT,EAAA,GACAU,EAAA,GAUA,OATAL,EAAA,IACAK,GAAAb,EAAAQ,GAAA,SAEAG,EAAA,IACAE,IAAA,KAAAA,EAAA,QAAAb,EAAAW,GAAA,OAEAC,EAAA,IACAC,IAAA,KAAAA,EAAA,QAAAb,EAAAY,IAEA,KAAAC,EAAA,OAAAA,EA/BAC,CAAAX,GACA,OAAAE,GACA,SACA,OAAAE,EAAA,OACA,SACA,OAAAA,EAAA,OACA,SACA,OAAAA,EAAA,OACA,SACA,OAAAA,EAAA,OACA,SACA,OAAAA,EAAA,OACA,SACA,OAAAA,EAAA,QAqBAR,EAAAgB,aAAA,OACAC,OAAA,kMAAAf,MAAA,KACAgB,YAAA,0HAAAhB,MAAA,KACAiB,kBAAA,EACAC,SAAA,2DAAAlB,MAAA,KACAmB,cAAA,2DAAAnB,MAAA,KACAoB,YAAA,2DAAApB,MAAA,KACAqB,eAAA,CACAC,GAAA,QACAC,IAAA,WACAC,EAAA,aACAC,GAAA,cACAC,IAAA,oBACAC,KAAA,2BAEAC,SAAA,CACAC,QAAA,cACAC,QAAA,cACAC,SAAA,MACAC,QAAA,cACAC,SAAA,MACAC,SAAA,KAEAC,aAAA,CACAC,OAnFA,SAAAC,GACA,IAAAC,EAAAD,EAQA,OAPAC,GAAA,IAAAD,EAAAE,QAAA,OACAD,EAAAE,MAAA,aACA,IAAAH,EAAAE,QAAA,OACAD,EAAAE,MAAA,aACA,IAAAH,EAAAE,QAAA,OACAD,EAAAE,MAAA,YACAF,EAAA,QA4EAG,KAxEA,SAAAJ,GACA,IAAAC,EAAAD,EAQA,OAPAC,GAAA,IAAAD,EAAAE,QAAA,OACAD,EAAAE,MAAA,aACA,IAAAH,EAAAE,QAAA,OACAD,EAAAE,MAAA,aACA,IAAAH,EAAAE,QAAA,OACAD,EAAAE,MAAA,YACAF,EAAA,QAiEAI,EAAA,UACAC,GAAA1C,EACA2C,EAAA,UACAC,GAAA5C,EACA6C,EAAA,UACAC,GAAA9C,EACA+C,EAAA,UACAC,GAAAhD,EACAiD,EAAA,UACAC,GAAAlD,EACAmD,EAAA,UACAC,GAAApD,GAEAqD,uBAAA,YACAC,QAAA,MACAC,KAAA,CACAC,IAAA,EACAC,IAAA,KA9GuCC,CAAWC,EAAQ","file":"js/moment-locale/tlh.ea96fe86.bundle.js","sourcesContent":["//! moment.js locale configuration\n\n;(function (global, factory) {\n   typeof exports === 'object' && typeof module !== 'undefined'\n       && typeof require === 'function' ? factory(require('../moment')) :\n   typeof define === 'function' && define.amd ? define(['../moment'], factory) :\n   factory(global.moment)\n}(this, (function (moment) { 'use strict';\n\n\n    var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');\n\n    function translateFuture(output) {\n        var time = output;\n        time = (output.indexOf('jaj') !== -1) ?\n        time.slice(0, -3) + 'leS' :\n        (output.indexOf('jar') !== -1) ?\n        time.slice(0, -3) + 'waQ' :\n        (output.indexOf('DIS') !== -1) ?\n        time.slice(0, -3) + 'nem' :\n        time + ' pIq';\n        return time;\n    }\n\n    function translatePast(output) {\n        var time = output;\n        time = (output.indexOf('jaj') !== -1) ?\n        time.slice(0, -3) + 'Hu’' :\n        (output.indexOf('jar') !== -1) ?\n        time.slice(0, -3) + 'wen' :\n        (output.indexOf('DIS') !== -1) ?\n        time.slice(0, -3) + 'ben' :\n        time + ' ret';\n        return time;\n    }\n\n    function translate(number, withoutSuffix, string, isFuture) {\n        var numberNoun = numberAsNoun(number);\n        switch (string) {\n            case 'ss':\n                return numberNoun + ' lup';\n            case 'mm':\n                return numberNoun + ' tup';\n            case 'hh':\n                return numberNoun + ' rep';\n            case 'dd':\n                return numberNoun + ' jaj';\n            case 'MM':\n                return numberNoun + ' jar';\n            case 'yy':\n                return numberNoun + ' DIS';\n        }\n    }\n\n    function numberAsNoun(number) {\n        var hundred = Math.floor((number % 1000) / 100),\n        ten = Math.floor((number % 100) / 10),\n        one = number % 10,\n        word = '';\n        if (hundred > 0) {\n            word += numbersNouns[hundred] + 'vatlh';\n        }\n        if (ten > 0) {\n            word += ((word !== '') ? ' ' : '') + numbersNouns[ten] + 'maH';\n        }\n        if (one > 0) {\n            word += ((word !== '') ? ' ' : '') + numbersNouns[one];\n        }\n        return (word === '') ? 'pagh' : word;\n    }\n\n    var tlh = moment.defineLocale('tlh', {\n        months : 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),\n        monthsShort : 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),\n        monthsParseExact : true,\n        weekdays : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),\n        weekdaysShort : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),\n        weekdaysMin : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),\n        longDateFormat : {\n            LT : 'HH:mm',\n            LTS : 'HH:mm:ss',\n            L : 'DD.MM.YYYY',\n            LL : 'D MMMM YYYY',\n            LLL : 'D MMMM YYYY HH:mm',\n            LLLL : 'dddd, D MMMM YYYY HH:mm'\n        },\n        calendar : {\n            sameDay: '[DaHjaj] LT',\n            nextDay: '[wa’leS] LT',\n            nextWeek: 'LLL',\n            lastDay: '[wa’Hu’] LT',\n            lastWeek: 'LLL',\n            sameElse: 'L'\n        },\n        relativeTime : {\n            future : translateFuture,\n            past : translatePast,\n            s : 'puS lup',\n            ss : translate,\n            m : 'wa’ tup',\n            mm : translate,\n            h : 'wa’ rep',\n            hh : translate,\n            d : 'wa’ jaj',\n            dd : translate,\n            M : 'wa’ jar',\n            MM : translate,\n            y : 'wa’ DIS',\n            yy : translate\n        },\n        dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n        ordinal : '%d.',\n        week : {\n            dow : 1, // Monday is the first day of the week.\n            doy : 4  // The week that contains Jan 4th is the first week of the year.\n        }\n    });\n\n    return tlh;\n\n})));\n"],"sourceRoot":""}