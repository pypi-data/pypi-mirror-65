"""Autogenerated API"""

import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)



@register_command(
    extending=("authentication","v1","methods"),
    module=argus_cli_module
)
def get_methods(
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """List authentication methods available on this server (PUBLIC)
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import get
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/authentication/v1/methods".format(settings["api"]["api_url"], )
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}

    query_parameters = {}

    log.debug("GET %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = get(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response
