"""Autogenerated API"""

import logging
from argus_cli.plugin import register_command
from argus_plugins import argus_cli_module

log = logging.getLogger(__name__)



@register_command(
    extending=("documents","v1","folder","path","access"),
    module=argus_cli_module
)
def add_document(
    folderID: int,
    name: str = None,
    data: str = None,
    text: str = None,
    mimeType: str = None,
    accessMode: str = None,
    lockRequestTime: int = None,
    inheritExplicitPermissions: bool = None,
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Create a new document (PUBLIC)
    :param int folderID: Parent folder ID
    :param str name: Name of new document  => Sanitize by regex \A[^\\\/:*"'?<>|]{1,254}\z
    :param str data: Base64 encoded document content formatted according to the given MIME type. It is required if 'text' parameter is not defined 
    :param str text: Plain text document content. If set change document content 
    :param str mimeType: MIME type of document content 
    :param str accessMode: General access mode of new document (default roleBased)
    :param int lockRequestTime: Specify how long the document should be locked (default 0)
    :param bool inheritExplicitPermissions: Inherit explicit permissions from parent folder (default false)
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ParentFolderNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import post
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/documents/v1/folder/{folderID}/documents".format(settings["api"]["api_url"], folderID=folderID)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}
    # Only send name if the argument was provided, dont send null values
    if name is not None:
        body.update({ "name": name })
    # Only send data if the argument was provided, dont send null values
    if data is not None:
        body.update({ "data": data })
    # Only send text if the argument was provided, dont send null values
    if text is not None:
        body.update({ "text": text })
    # Only send mimeType if the argument was provided, dont send null values
    if mimeType is not None:
        body.update({ "mimeType": mimeType })
    # Only send accessMode if the argument was provided, dont send null values
    if accessMode is not None:
        body.update({ "accessMode": accessMode })
    # Only send lockRequestTime if the argument was provided, dont send null values
    if lockRequestTime is not None:
        body.update({ "lockRequestTime": lockRequestTime })
    # Only send inheritExplicitPermissions if the argument was provided, dont send null values
    if inheritExplicitPermissions is not None:
        body.update({ "inheritExplicitPermissions": inheritExplicitPermissions })

    query_parameters = {}

    log.debug("POST %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = post(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response

@register_command(
    extending=("documents","v1","folder","path","access"),
    module=argus_cli_module
)
def add_folder(
    parentID: int,
    name: str = None,
    accessMode: str = None,
    inheritExplicitPermissions: bool = None,
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Create a new subfolder (PUBLIC)
    :param int parentID: ID of parent folder
    :param str name: Name of new folder  => Sanitize by regex \A[^\\\/:*"?<>|]{1,254}\z
    :param str accessMode: General access mode of new folder (default roleBased)
    :param bool inheritExplicitPermissions: Inherit explicit permissions from parent folder (default false)
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ParentFolderNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import post
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/documents/v1/folder/{parentID}".format(settings["api"]["api_url"], parentID=parentID)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}
    # Only send name if the argument was provided, dont send null values
    if name is not None:
        body.update({ "name": name })
    # Only send accessMode if the argument was provided, dont send null values
    if accessMode is not None:
        body.update({ "accessMode": accessMode })
    # Only send inheritExplicitPermissions if the argument was provided, dont send null values
    if inheritExplicitPermissions is not None:
        body.update({ "inheritExplicitPermissions": inheritExplicitPermissions })

    query_parameters = {}

    log.debug("POST %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = post(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response

@register_command(
    extending=("documents","v1","folder","path","access"),
    module=argus_cli_module
)
def add_folder_by_path(
    parentFolderPath: str,
    customer: str = None,
    name: str = None,
    accessMode: str = None,
    createMissingFolders: bool = None,
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Create a new subfolder in specified parent folder.
    :param str parentFolderPath: Path from customer root to the parent folder (if not specified, add the folder in the root folder)
    :param str customer: Customer space to fetch from (default is current users customer
    :param str name: Name of new folder  => Sanitize by regex \A[^\\\/:*"?<>|]{1,254}\z
    :param str accessMode: General access mode of new folder (default roleBased)
    :param bool createMissingFolders: If true, create any missing parent folder elements (default false)
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ParentFolderNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import post
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/documents/v1/folder/path{parentFolderPath}".format(settings["api"]["api_url"], parentFolderPath=parentFolderPath, customer=customer)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}
    # Only send createMissingFolders if the argument was provided, dont send null values
    if createMissingFolders is not None:
        body.update({ "createMissingFolders": createMissingFolders })
    # Only send name if the argument was provided, dont send null values
    if name is not None:
        body.update({ "name": name })
    # Only send accessMode if the argument was provided, dont send null values
    if accessMode is not None:
        body.update({ "accessMode": accessMode })

    query_parameters = {}
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        query_parameters.update({ "customer": customer })

    log.debug("POST %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = post(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response

@register_command(
    extending=("documents","v1","folder","path","access"),
    module=argus_cli_module
)
def add_folder_watcher(
    folderID: int,
    subjectDomain: str = None,
    subject: str = None,
    negated: bool = None,
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Add watcher to specified folder (DEV)
    :param int folderID: ID of folder
    :param str subjectDomain: Domain to resolve subject shortname in. Defaults to current users domain. 
    :param str subject: ID or shortname of subject to add as watcher. 
    :param bool negated: If true, register a negated watcher entry.. 
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import post
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/documents/v1/folder/{folderID}/watchers".format(settings["api"]["api_url"], folderID=folderID)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}
    # Only send subjectDomain if the argument was provided, dont send null values
    if subjectDomain is not None:
        body.update({ "subjectDomain": subjectDomain })
    # Only send subject if the argument was provided, dont send null values
    if subject is not None:
        body.update({ "subject": subject })
    # Only send negated if the argument was provided, dont send null values
    if negated is not None:
        body.update({ "negated": negated })

    query_parameters = {}

    log.debug("POST %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = post(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response

@register_command(
    extending=("documents","v1","folder","path","access"),
    module=argus_cli_module
)
def browse_folder(
    folderID: int,
    limit: int = 25,
    offset: int = None,
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Fetch specified folder entries (PUBLIC)
    :param int folderID: ID of folder to browse
    :param int limit: Maximum number of returned results
    :param int offset: Skip a number of results
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises FolderNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import get
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/documents/v1/folder/{folderID}/content".format(settings["api"]["api_url"], limit=limit, offset=offset, folderID=folderID)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}

    query_parameters = {}
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        query_parameters.update({ "limit": limit })
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        query_parameters.update({ "offset": offset })

    log.debug("GET %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = get(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response

@register_command(
    extending=("documents","v1","folder","path","access"),
    module=argus_cli_module
)
def browse_folder_by_path(
    path: str,
    customer: str = None,
    limit: int = 25,
    offset: int = None,
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Fetch specified folder entries
    :param str path: Path from customer root (if not specified, this returns the root
    :param str customer: Customer space to fetch from (default is current users customer
    :param int limit: Maximum number of returned results
    :param int offset: Skip a number of results
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises FolderNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import get
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/documents/v1/folder/path/content{path}".format(settings["api"]["api_url"], limit=limit, path=path, customer=customer, offset=offset)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}

    query_parameters = {}
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        query_parameters.update({ "limit": limit })
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        query_parameters.update({ "customer": customer })
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        query_parameters.update({ "offset": offset })

    log.debug("GET %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = get(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response

@register_command(
    extending=("documents","v1","folder","path","access"),
    module=argus_cli_module
)
def delete_folder(
    folderID: int,
    cascadeDocumentID: int = None,
    mode: str = "DELETE_IF_EMPTY",
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Delete specified folder, possibly recursively discarding contained documents (PUBLIC)
    :param int folderID: ID of folder to delete
    :param list cascadeDocumentID: List with IDs of documents which can be discarded (with mode DELETE_CASCADE_LISTED_DOCUMENTS)
    :param str mode: Recursive folder delete strategy, default is DELETE_IF_EMPTY
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ConflictOnDelete(folderContainsUndeletedDocument(s))Exception: on 409
    :raises ValidationFailedException: on 412
    :raises Document(s)LockedException: on 423
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import delete
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/documents/v1/folder/{folderID}".format(settings["api"]["api_url"], mode=mode, folderID=folderID, cascadeDocumentID=cascadeDocumentID)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}

    query_parameters = {}
    # Only send mode if the argument was provided, dont send null values
    if mode is not None:
        query_parameters.update({ "mode": mode })
    # Only send cascadeDocumentID if the argument was provided, dont send null values
    if cascadeDocumentID is not None:
        query_parameters.update({ "cascadeDocumentID": cascadeDocumentID })

    log.debug("DELETE %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = delete(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response

@register_command(
    extending=("documents","v1","folder","path","access"),
    module=argus_cli_module
)
def delete_folder_watcher(
    folderID: int,
    entryID: str,
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Delete watcher entry from folder (DEV)
    :param int folderID: ID of folder
    :param str entryID: ID of watcher entry
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import delete
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/documents/v1/folder/{folderID}/watchers/{entryID}".format(settings["api"]["api_url"], folderID=folderID, entryID=entryID)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}

    query_parameters = {}

    log.debug("DELETE %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = delete(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response

@register_command(
    extending=("documents","v1","folder","path","access"),
    module=argus_cli_module
)
def get_current_user_folder_watch_status(
    folderID: int,
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Get current user watcher status for folder (DEV)
    :param int folderID: ID of folder
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import get
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/documents/v1/folder/{folderID}/watch".format(settings["api"]["api_url"], folderID=folderID)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}

    query_parameters = {}

    log.debug("GET %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = get(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response

@register_command(
    extending=("documents","v1","folder","path","access"),
    module=argus_cli_module
)
def get_current_user_root_folder(
    limit: int = 25,
    offset: int = None,
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Fetch root folder for the customers that current user has access to (PUBLIC)
    :param int limit: Maximum number of returned results
    :param int offset: Skip a number of results
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import get
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/documents/v1/folder/root".format(settings["api"]["api_url"], limit=limit, offset=offset)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}

    query_parameters = {}
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        query_parameters.update({ "limit": limit })
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        query_parameters.update({ "offset": offset })

    log.debug("GET %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = get(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response

@register_command(
    extending=("documents","v1","folder","path","access"),
    module=argus_cli_module
)
def get_folder_meta_info_by_id(
    folderID: int,
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Fetch specified folder metadata (PUBLIC)
    :param int folderID: ID of folder to fetch
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import get
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/documents/v1/folder/{folderID}".format(settings["api"]["api_url"], folderID=folderID)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}

    query_parameters = {}

    log.debug("GET %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = get(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response

@register_command(
    extending=("documents","v1","folder","path","access"),
    module=argus_cli_module
)
def get_folder_meta_info_by_path(
    path: str,
    customer: str = None,
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Fetch specified folder metadata
    :param str path: Path from customer root (if not specified, this returns the root)
    :param str customer: Customer space to fetch from (default is current users customer
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import get
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/documents/v1/folder/path/meta{path}".format(settings["api"]["api_url"], path=path, customer=customer)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}

    query_parameters = {}
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        query_parameters.update({ "customer": customer })

    log.debug("GET %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = get(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response

@register_command(
    extending=("documents","v1","folder","path","access"),
    module=argus_cli_module
)
def grant_folder_access(
    folderID: int,
    subjectID: int = None,
    level: str = None,
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Grant access to specified folder (PUBLIC)
    :param int folderID: Folder ID
    :param int subjectID: Specify user/group to grant access to 
    :param str level: Specify access level to grant to user/group 
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import post
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/documents/v1/folder/{folderID}/access".format(settings["api"]["api_url"], folderID=folderID)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}
    # Only send subjectID if the argument was provided, dont send null values
    if subjectID is not None:
        body.update({ "subjectID": subjectID })
    # Only send level if the argument was provided, dont send null values
    if level is not None:
        body.update({ "level": level })

    query_parameters = {}

    log.debug("POST %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = post(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response

@register_command(
    extending=("documents","v1","folder","path","access"),
    module=argus_cli_module
)
def grant_folder_access_by_path(
    path: str,
    customer: str = None,
    subjectID: int = None,
    level: str = None,
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Grant access to specified folder
    :param str path: Path from customer root (if not specified, this returns the root
    :param str customer: Customer space to fetch from (default is current users customer
    :param int subjectID: Specify user/group to grant access to 
    :param str level: Specify access level to grant to user/group 
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import post
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/documents/v1/folder/path/access{path}".format(settings["api"]["api_url"], path=path, customer=customer)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}
    # Only send subjectID if the argument was provided, dont send null values
    if subjectID is not None:
        body.update({ "subjectID": subjectID })
    # Only send level if the argument was provided, dont send null values
    if level is not None:
        body.update({ "level": level })

    query_parameters = {}
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        query_parameters.update({ "customer": customer })

    log.debug("POST %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = post(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response

@register_command(
    extending=("documents","v1","folder","path","access"),
    module=argus_cli_module
)
def list_folder_access(
    folderID: int,
    limit: int = 25,
    offset: int = None,
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Fetch ACL for specified folder (PUBLIC)
    :param int folderID: Folder ID
    :param int limit: Maximum number of returned results
    :param int offset: Skip a number of results
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import get
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/documents/v1/folder/{folderID}/access".format(settings["api"]["api_url"], limit=limit, folderID=folderID, offset=offset)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}

    query_parameters = {}
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        query_parameters.update({ "limit": limit })
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        query_parameters.update({ "offset": offset })

    log.debug("GET %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = get(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response

@register_command(
    extending=("documents","v1","folder","path","access"),
    module=argus_cli_module
)
def list_folder_access_by_path(
    path: str,
    customer: str = None,
    limit: int = 25,
    offset: int = None,
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Fetch ACL for specified folder
    :param str path: Path from customer root (if not specified, this returns the root
    :param str customer: Customer space to fetch from (default is current users customer
    :param int limit: Maximum number of returned results
    :param int offset: Skip a number of results
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import get
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/documents/v1/folder/path/access{path}".format(settings["api"]["api_url"], limit=limit, path=path, customer=customer, offset=offset)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}

    query_parameters = {}
    # Only send limit if the argument was provided, dont send null values
    if limit is not None:
        query_parameters.update({ "limit": limit })
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        query_parameters.update({ "customer": customer })
    # Only send offset if the argument was provided, dont send null values
    if offset is not None:
        query_parameters.update({ "offset": offset })

    log.debug("GET %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = get(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response

@register_command(
    extending=("documents","v1","folder","path","access"),
    module=argus_cli_module
)
def move_folder(
    folderID: int,
    newFolderID: int = None,
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Move specified folder (PUBLIC)
    :param int folderID: ID of folder to update
    :param int newFolderID: 
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import put
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/documents/v1/folder/{folderID}/move".format(settings["api"]["api_url"], folderID=folderID)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}
    # Only send newFolderID if the argument was provided, dont send null values
    if newFolderID is not None:
        body.update({ "newFolderID": newFolderID })

    query_parameters = {}

    log.debug("PUT %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = put(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response

@register_command(
    extending=("documents","v1","folder","path","access"),
    module=argus_cli_module
)
def revoke_folder_access(
    path: str,
    customer: str = None,
    accessID: int = None,
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Revoke specified explicit access from folder
    :param str path: Path from customer root (if not specified, this returns the root)
    :param str customer: Customer space to fetch from (default is current users customer
    :param int accessID: Access ID
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import delete
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/documents/v1/folder/path/access{path}".format(settings["api"]["api_url"], path=path, customer=customer, accessID=accessID)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}

    query_parameters = {}
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        query_parameters.update({ "customer": customer })
    # Only send accessID if the argument was provided, dont send null values
    if accessID is not None:
        query_parameters.update({ "accessID": accessID })

    log.debug("DELETE %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = delete(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response

@register_command(
    extending=("documents","v1","folder","path","access"),
    module=argus_cli_module
)
def revoke_folder_access_1(
    folderID: int,
    accessID: int,
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Revoke specified explicit access from folder (PUBLIC)
    :param int folderID: Folder ID
    :param int accessID: Access ID
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import delete
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/documents/v1/folder/{folderID}/access/{accessID}".format(settings["api"]["api_url"], folderID=folderID, accessID=accessID)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}

    query_parameters = {}

    log.debug("DELETE %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = delete(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response

@register_command(
    extending=("documents","v1","folder","path","access"),
    module=argus_cli_module
)
def update_document_access_settings_1(
    folderID: int,
    accessMode: str = None,
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Change access settings on specified folder (PUBLIC)
    :param int folderID: Folder ID
    :param str accessMode: Specify general access mode for document/folder 
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import put
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/documents/v1/folder/{folderID}/access".format(settings["api"]["api_url"], folderID=folderID)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}
    # Only send accessMode if the argument was provided, dont send null values
    if accessMode is not None:
        body.update({ "accessMode": accessMode })

    query_parameters = {}

    log.debug("PUT %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = put(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response

@register_command(
    extending=("documents","v1","folder","path","access"),
    module=argus_cli_module
)
def update_document_access_settings_by_path(
    path: str,
    customer: str = None,
    accessMode: str = None,
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Change access settings on specified folder
    :param str path: Path from customer root (if not specified, this returns the root)
    :param str customer: Customer space to fetch from (default is current users customer
    :param str accessMode: Specify general access mode for document/folder 
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import put
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/documents/v1/folder/path/access{path}".format(settings["api"]["api_url"], path=path, customer=customer)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}
    # Only send accessMode if the argument was provided, dont send null values
    if accessMode is not None:
        body.update({ "accessMode": accessMode })

    query_parameters = {}
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        query_parameters.update({ "customer": customer })

    log.debug("PUT %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = put(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response

@register_command(
    extending=("documents","v1","folder","path","access"),
    module=argus_cli_module
)
def update_folder(
    folderID: int,
    name: str = None,
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Update specified folder (PUBLIC)
    :param int folderID: ID of folder to update
    :param str name: If set change folder name  => Sanitize by regex \A[^\\\/:*"?<>|]{1,254}\z
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import put
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/documents/v1/folder/{folderID}".format(settings["api"]["api_url"], folderID=folderID)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}
    # Only send name if the argument was provided, dont send null values
    if name is not None:
        body.update({ "name": name })

    query_parameters = {}

    log.debug("PUT %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = put(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response

@register_command(
    extending=("documents","v1","folder","path","access"),
    module=argus_cli_module
)
def update_folder_by_path(
    path: str,
    customer: str = None,
    name: str = None,
    
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """Update specified folder
    :param str path: Path from customer root (if not specified, this returns the root)
    :param str customer: Customer space to fetch from (default is current users customer
    :param str name: If set change folder name  => Sanitize by regex \A[^\\\/:*"?<>|]{1,254}\z
    :raises AuthenticationFailedException: on 401
    :raises AccessDeniedException: on 403
    :raises ObjectNotFoundException: on 404
    :raises ValidationFailedException: on 412
    :returns: A requests object or JSON object
    """
    from os import getenv
    from requests import put
    from argus_api.exceptions import http
    
    from argus_cli.settings import settings
    
    url = "{}/documents/v1/folder/path/meta{path}".format(settings["api"]["api_url"], path=path, customer=customer)
    headers = {
        'User-Agent': 'ArgusToolbelt/',
    }

    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]

    if apiKey:
        headers["Argus-API-Key"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}
    # Only send name if the argument was provided, dont send null values
    if name is not None:
        body.update({ "name": name })

    query_parameters = {}
    # Only send customer if the argument was provided, dont send null values
    if customer is not None:
        query_parameters.update({ "customer": customer })

    log.debug("PUT %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    response = put(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response
