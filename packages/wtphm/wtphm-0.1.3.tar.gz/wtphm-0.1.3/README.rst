.. comment

WTPHM
*****

The **W**\ind **T**\urbine **P**\rognostics and **H**\ealth **M**\anagement library
processes wind turbine events (also called alarms or status) data, as well as
operational SCADA data (the usually 10-minute data coming off of wind turbines)
for easier fault detection, prognostics or reliability research.

Turbine alarms often appear in high numbers during fault events, and significant
effort can be involved in processing these alarms in order to find what actually
happened, what the root cause was, and when the turbine came back online.
This module solves this by automatically identifying stoppages and fault periods
in the data and assigning a high-level "stoppage category" to each.
It also provides functionality to use this info to label SCADA data for training
predictive maintenance algorithms.

Although there are commercial packages that can perform this task, this library
aims to be an open-source alternative for use by the research community.

Please reference this repo if used in any research. Any bugs, questions or
feature requests can be raised on GitHub. Can also reach me on twitter
@leahykev.

Installation
============

Install using pip! ::

  pip install wtphm


Is my Data Compatible?
======================

The data manipulated in this library are turbine events/status/alarms data and
10-minute operational SCADA data.
They must be in the formats described below.

Event Data
----------

.. start event comment

The ``event_data`` is related to any fault or information messages generated by
the turbine. This is instantaneous, and records information like faults that have
occurred, or status messages like low- or no- wind, or turbine shutting down due
to storm winds.

The data must have the following column headers and information available:

* ``turbine_num``: The turbine the data applies to
* ``code``: There are a set list of events which can occur on the
  turbine. Each one of these has an event code
* ``description``: Each event code also has an associated description
* ``time_on``: The start time of the event
* ``stop_cat``: This is a category for events which cause the turbine to come to
  a stop. It could be the functional location of where in the turbine the event
  originated (e.g. pitch system), a category for grid-related events,
  that the turbine is down for testing or maintenance, in curtailment due to
  shadow flicker, etc.
* In addition, there must be a specific event ``code`` which signifies return to
  normal operation after any downtime or abnormal operating period.

.. end event comment

SCADA/Operational data
----------------------

.. start scada comment

The ``scada_data`` is typically recorded in 10-minute intervals and has attributes like
average power output, maximum, minimum and average windspeeds, etc. over the previous
10-minute period.

For the purposes of this library, it must have the following column headers and
data:

* ``turbine_num``: The turbine the data applies to
* ``time``: The 10-minute period the data belongs to
* availability counters: Some of the functions for giving the batches a stop
  category rely on availability counters. These are sometimes stored as part of
  scada data, and sometimes in separate availability data. They count the portion
  of time the turbine was in some mode of operation in each 10-minute period,
  for availability calculations. For example, maintenance time, fault time, etc.
  In order to be used in this library, the availability counters are
  assumed to range between 0 and
  *n* in each period, where *n* is some arbitrary maximum (typically 600, for
  the 600 seconds in the 10-minute period).

.. end scada comment

Documentation
=============

Documentation and user guide can be found on readthedocs
`here <https://wtphm.readthedocs.io/en/latest/>`_. A local copy of the docs can
be built by running `<docs/build_docs.bat>`_ with sphinx installed.
