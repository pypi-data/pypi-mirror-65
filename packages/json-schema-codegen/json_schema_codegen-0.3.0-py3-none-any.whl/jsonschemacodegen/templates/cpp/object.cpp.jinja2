{%-import 'propname.jinja2' as helper-%}
{%-set className = resolver.cpp_resolve_namespace(ns)+Name%}
{%-set rapidjson = resolver.cpp_resolve_namespace(['rapidjson']) %}
{%macro NestedObjectNameOnly(name) -%}
    {%-if name|UpperCamelCase != Name|UpperCamelCase%}{{-name | UpperCamelCase-}}{%else%}{{name | UpperCamelCase}}Property{%endif-%}
{%-endmacro%}
{%macro NestedObjectName(name) -%}
    {{className}}::{{NestedObjectNameOnly(name)}}
{%-endmacro%}
{%-macro ObjectType(propName, propSchema) -%}
    {%-if '$ref' in propSchema -%}
        {{-loader.Reference(resolver, propSchema['$ref'])-}}
    {%-else-%}
        {{-NestedObjectName(propName)-}}
    {%-endif-%}
{%-endmacro%}

{%import 'loader.jinja2' as loader with context%}
{%-for propName, propSchema in schema.RequiredList() %}
{{loader.Class('cpp', resolver, [className], NestedObjectNameOnly(propName), propSchema) }}
{%-endfor%}
{%-for propName, propSchema in schema.UnRequiredList() %}
{{loader.Class('cpp', resolver, [className], NestedObjectNameOnly(propName), propSchema) }}
{%-endfor%}

{%if schema.RequiredList() | length > 0 %}
{{className}}::{{Name}}(
    {%-for propName, propSchema in schema.RequiredList()-%}
        const {{ObjectType(propName, propSchema)}}& {{propName | camelCase}}{%if not loop.last%}, {%endif%}
    {%-endfor%}){{' : '}}
    {%-for propName, propSchema in schema.RequiredList()-%}
        {{propName|privatize}}({{propName | camelCase}}){%if not loop.last%}, {%endif%}
    {%-endfor%}
{

}
{%else%}
{{className}}::{{Name}}()
{

}

{%-if schema['properties'] | length == 1 %}
{%-set propName = schema.PropertyKeys()[0] %}
{%-set propSchema = schema.PropertyValues()[0] %}
{{className}}::{{Name}}(const {{ObjectType(propName, propSchema)}}& {{propName | camelCase}}) : {{propName|privatize}}({{propName | camelCase}})
{

}
{%-endif%}
{%if 'type' in propSchema and propSchema['type'] in ['boolean', 'integer', 'number'] %}
{{className}}::{{Name}}({{ {"boolean":"bool", "integer":"int", "number":"double"}[propSchema.type] }} {{propName | camelCase}}) : {{Name}}({{ObjectType(propName, propSchema)}}({{propName | camelCase}}))
{

}
{%-elif 'type' in propSchema and propSchema['type'] == 'string'-%}
{{className}}::{{Name}}(const std::string& {{propName | camelCase}}) : {{Name}}({{ObjectType(propName, propSchema)}}::FromString({{propName | camelCase}}))
{

}
{%-endif%} {# propschema type #}
{%endif%}

{%-for propName, propSchema in schema.properties.items() %}
{%-if propName in schema.required%}

{{ObjectType(propName, propSchema)}} {{className}}::Get{{propName | UpperCamelCase}}() const
{
    return {{propName | privatize}};
}

{{className}}& {{className}}::Set{{propName | UpperCamelCase}}(const {{ObjectType(propName, propSchema)}}& value)
{
    {{propName | privatize}} = value;
    {{propName | privatize}}.SetHandle({{helper.ConstPropertyName(propName)}});
    return *this;
}
{%else%}
boost::optional<{{ObjectType(propName, propSchema)}}> {{className}}::Get{{propName | UpperCamelCase}}() const
{
    return {{propName | privatize}};
}

{{className}}& {{className}}::Set{{propName | UpperCamelCase}}(const {{ObjectType(propName, propSchema)}}& value)
{
    {{propName | privatize}} = value;
    {{propName | privatize}}->SetHandle({{helper.ConstPropertyName(propName)}});
    return *this;
}
{%endif%}
{%-endfor%}

{{className}} {{className}}::FromJson(const {{rapidjson}}Value& json)
{
    if (!(json.IsObject()))
    {
        throw std::invalid_argument("The '{{className}}' document JSON wasn't an object");
    }
    {##}
    {%-for propName, propSchema in schema.RequiredList()-%}
    if (!json.HasMember({{helper.ConstPropertyName(propName)}}))
    {
        throw std::invalid_argument("JSON is missing the '{{propName}}' property.");
    }
    {{ObjectType(propName, propSchema)}} local{{propName | UpperCamelCase}} = {{ObjectType(propName, propSchema)}}::FromJson(json[{{helper.ConstPropertyName(propName)}}]);
    local{{propName | UpperCamelCase}}.SetHandle({{helper.ConstPropertyName(propName)}});
    {%-endfor%}

    {%-if schema.RequiredList() %}
    {{className}} newInstance({%for propName, propSchema in schema.RequiredList()%}local{{propName | UpperCamelCase}}{%if not loop.last%}, {%endif%}{%endfor%});
    {%else%}
    {{className}} newInstance;
    {%-endif%}
    {%-for propName, propSchema in schema.UnRequiredList()%}
    if (json.HasMember({{helper.ConstPropertyName(propName)}}))
    {
        auto local{{propName | UpperCamelCase}} = {{ObjectType(propName, propSchema)}}::FromJson(json[{{helper.ConstPropertyName(propName)}}]);
        local{{propName | UpperCamelCase}}.SetHandle({{helper.ConstPropertyName(propName)}});
        newInstance.Set{{propName | UpperCamelCase}}(local{{propName | UpperCamelCase}});
    }
    {%-endfor%}
    return newInstance;
}

void {{className}}::ToJson({{rapidjson}}Value& value, {{resolver.cpp_resolve_namespace(['rapidjson', 'Value'])}}AllocatorType& allocator) const
{
    if (!value.IsObject())
    {
        value.SetObject();
    }

    {%-for propName, propSchema in schema.properties.items() %}
    {%-if propName in schema.required%}
    {{rapidjson}}Value temp{{propName|UpperCamelCase}};
    {{propName|privatize}}.ToJson(temp{{propName|UpperCamelCase}}, allocator);
    value.AddMember({{rapidjson}}StringRef({{helper.ConstPropertyName(propName)}}), temp{{propName|UpperCamelCase}}, allocator);
    {%else%}
    if ({{propName|privatize}})
    {
        {{rapidjson}}Value temp{{propName|UpperCamelCase}};
        {{propName|privatize}}->ToJson(temp{{propName|UpperCamelCase}}, allocator);
        value.AddMember({{rapidjson}}StringRef({{helper.ConstPropertyName(propName)}}), temp{{propName|UpperCamelCase}}, allocator);
    }
    {%endif%}
    {%-endfor%}
}

void {{className}}::SetHandle(const std::string& handle)
{
    _handle = handle;
}

std::string {{className}}::GetHandle() const
{
    return _handle;
}